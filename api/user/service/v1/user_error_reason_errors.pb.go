// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUserAccountFormatError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_ACCOUNT_FORMAT_ERROR.String() && e.Code == 403
}

func ErrorUserAccountFormatError(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_USER_ACCOUNT_FORMAT_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsUserPasswordFormatError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_PASSWORD_FORMAT_ERROR.String() && e.Code == 403
}

func ErrorUserPasswordFormatError(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_USER_PASSWORD_FORMAT_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUserPasswordError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_PASSWORD_ERROR.String() && e.Code == 403
}

func ErrorUserPasswordError(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_USER_PASSWORD_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsItemExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ITEM_EXISTS.String() && e.Code == 403
}

func ErrorItemExists(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_ITEM_EXISTS.String(), fmt.Sprintf(format, args...))
}
