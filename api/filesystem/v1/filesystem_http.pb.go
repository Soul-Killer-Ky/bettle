// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.6.1
// source: filesystem/v1/filesystem.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFilesystemUpload = "/api.storage.v1.Filesystem/Upload"

type FilesystemHTTPServer interface {
	Upload(context.Context, *UploadRequest) (*UploadReply, error)
}

func RegisterFilesystemHTTPServer(s *http.Server, srv FilesystemHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/upload", _Filesystem_Upload0_HTTP_Handler(srv))
}

func _Filesystem_Upload0_HTTP_Handler(srv FilesystemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFilesystemUpload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Upload(ctx, req.(*UploadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadReply)
		return ctx.Result(200, reply)
	}
}

type FilesystemHTTPClient interface {
	Upload(ctx context.Context, req *UploadRequest, opts ...http.CallOption) (rsp *UploadReply, err error)
}

type FilesystemHTTPClientImpl struct {
	cc *http.Client
}

func NewFilesystemHTTPClient(client *http.Client) FilesystemHTTPClient {
	return &FilesystemHTTPClientImpl{client}
}

func (c *FilesystemHTTPClientImpl) Upload(ctx context.Context, in *UploadRequest, opts ...http.CallOption) (*UploadReply, error) {
	var out UploadReply
	pattern := "/v1/upload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFilesystemUpload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
