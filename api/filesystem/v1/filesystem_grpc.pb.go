// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: filesystem/v1/filesystem.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Filesystem_CreateStorage_FullMethodName = "/api.storage.v1.Filesystem/CreateStorage"
	Filesystem_UpdateStorage_FullMethodName = "/api.storage.v1.Filesystem/UpdateStorage"
	Filesystem_DeleteStorage_FullMethodName = "/api.storage.v1.Filesystem/DeleteStorage"
	Filesystem_GetStorage_FullMethodName    = "/api.storage.v1.Filesystem/GetStorage"
	Filesystem_ListStorage_FullMethodName   = "/api.storage.v1.Filesystem/ListStorage"
	Filesystem_Upload_FullMethodName        = "/api.storage.v1.Filesystem/Upload"
)

// FilesystemClient is the client API for Filesystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesystemClient interface {
	CreateStorage(ctx context.Context, in *CreateStorageRequest, opts ...grpc.CallOption) (*CreateStorageReply, error)
	UpdateStorage(ctx context.Context, in *UpdateStorageRequest, opts ...grpc.CallOption) (*UpdateStorageReply, error)
	DeleteStorage(ctx context.Context, in *DeleteStorageRequest, opts ...grpc.CallOption) (*DeleteStorageReply, error)
	GetStorage(ctx context.Context, in *GetStorageRequest, opts ...grpc.CallOption) (*GetStorageReply, error)
	ListStorage(ctx context.Context, in *ListStorageRequest, opts ...grpc.CallOption) (*ListStorageReply, error)
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadReply, error)
}

type filesystemClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemClient(cc grpc.ClientConnInterface) FilesystemClient {
	return &filesystemClient{cc}
}

func (c *filesystemClient) CreateStorage(ctx context.Context, in *CreateStorageRequest, opts ...grpc.CallOption) (*CreateStorageReply, error) {
	out := new(CreateStorageReply)
	err := c.cc.Invoke(ctx, Filesystem_CreateStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) UpdateStorage(ctx context.Context, in *UpdateStorageRequest, opts ...grpc.CallOption) (*UpdateStorageReply, error) {
	out := new(UpdateStorageReply)
	err := c.cc.Invoke(ctx, Filesystem_UpdateStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) DeleteStorage(ctx context.Context, in *DeleteStorageRequest, opts ...grpc.CallOption) (*DeleteStorageReply, error) {
	out := new(DeleteStorageReply)
	err := c.cc.Invoke(ctx, Filesystem_DeleteStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) GetStorage(ctx context.Context, in *GetStorageRequest, opts ...grpc.CallOption) (*GetStorageReply, error) {
	out := new(GetStorageReply)
	err := c.cc.Invoke(ctx, Filesystem_GetStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) ListStorage(ctx context.Context, in *ListStorageRequest, opts ...grpc.CallOption) (*ListStorageReply, error) {
	out := new(ListStorageReply)
	err := c.cc.Invoke(ctx, Filesystem_ListStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadReply, error) {
	out := new(UploadReply)
	err := c.cc.Invoke(ctx, Filesystem_Upload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesystemServer is the server API for Filesystem service.
// All implementations must embed UnimplementedFilesystemServer
// for forward compatibility
type FilesystemServer interface {
	CreateStorage(context.Context, *CreateStorageRequest) (*CreateStorageReply, error)
	UpdateStorage(context.Context, *UpdateStorageRequest) (*UpdateStorageReply, error)
	DeleteStorage(context.Context, *DeleteStorageRequest) (*DeleteStorageReply, error)
	GetStorage(context.Context, *GetStorageRequest) (*GetStorageReply, error)
	ListStorage(context.Context, *ListStorageRequest) (*ListStorageReply, error)
	Upload(context.Context, *UploadRequest) (*UploadReply, error)
	mustEmbedUnimplementedFilesystemServer()
}

// UnimplementedFilesystemServer must be embedded to have forward compatible implementations.
type UnimplementedFilesystemServer struct {
}

func (UnimplementedFilesystemServer) CreateStorage(context.Context, *CreateStorageRequest) (*CreateStorageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorage not implemented")
}
func (UnimplementedFilesystemServer) UpdateStorage(context.Context, *UpdateStorageRequest) (*UpdateStorageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorage not implemented")
}
func (UnimplementedFilesystemServer) DeleteStorage(context.Context, *DeleteStorageRequest) (*DeleteStorageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorage not implemented")
}
func (UnimplementedFilesystemServer) GetStorage(context.Context, *GetStorageRequest) (*GetStorageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorage not implemented")
}
func (UnimplementedFilesystemServer) ListStorage(context.Context, *ListStorageRequest) (*ListStorageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStorage not implemented")
}
func (UnimplementedFilesystemServer) Upload(context.Context, *UploadRequest) (*UploadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFilesystemServer) mustEmbedUnimplementedFilesystemServer() {}

// UnsafeFilesystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesystemServer will
// result in compilation errors.
type UnsafeFilesystemServer interface {
	mustEmbedUnimplementedFilesystemServer()
}

func RegisterFilesystemServer(s grpc.ServiceRegistrar, srv FilesystemServer) {
	s.RegisterService(&Filesystem_ServiceDesc, srv)
}

func _Filesystem_CreateStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).CreateStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filesystem_CreateStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).CreateStorage(ctx, req.(*CreateStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_UpdateStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).UpdateStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filesystem_UpdateStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).UpdateStorage(ctx, req.(*UpdateStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_DeleteStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).DeleteStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filesystem_DeleteStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).DeleteStorage(ctx, req.(*DeleteStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_GetStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).GetStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filesystem_GetStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).GetStorage(ctx, req.(*GetStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_ListStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).ListStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filesystem_ListStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).ListStorage(ctx, req.(*ListStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filesystem_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Filesystem_ServiceDesc is the grpc.ServiceDesc for Filesystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Filesystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.storage.v1.Filesystem",
	HandlerType: (*FilesystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStorage",
			Handler:    _Filesystem_CreateStorage_Handler,
		},
		{
			MethodName: "UpdateStorage",
			Handler:    _Filesystem_UpdateStorage_Handler,
		},
		{
			MethodName: "DeleteStorage",
			Handler:    _Filesystem_DeleteStorage_Handler,
		},
		{
			MethodName: "GetStorage",
			Handler:    _Filesystem_GetStorage_Handler,
		},
		{
			MethodName: "ListStorage",
			Handler:    _Filesystem_ListStorage_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _Filesystem_Upload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filesystem/v1/filesystem.proto",
}
