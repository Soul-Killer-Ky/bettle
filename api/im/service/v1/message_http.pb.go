// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.6.1
// source: im/service/v1/message.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMessageListOfflineMessage = "/api.im.service.v1.Message/ListOfflineMessage"

type MessageHTTPServer interface {
	ListOfflineMessage(context.Context, *ListOfflineMessageRequest) (*ListOfflineMessageReply, error)
}

func RegisterMessageHTTPServer(s *http.Server, srv MessageHTTPServer) {
	r := s.Route("/")
	r.POST("/im/v1/message/list_offline", _Message_ListOfflineMessage0_HTTP_Handler(srv))
}

func _Message_ListOfflineMessage0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOfflineMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageListOfflineMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOfflineMessage(ctx, req.(*ListOfflineMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOfflineMessageReply)
		return ctx.Result(200, reply)
	}
}

type MessageHTTPClient interface {
	ListOfflineMessage(ctx context.Context, req *ListOfflineMessageRequest, opts ...http.CallOption) (rsp *ListOfflineMessageReply, err error)
}

type MessageHTTPClientImpl struct {
	cc *http.Client
}

func NewMessageHTTPClient(client *http.Client) MessageHTTPClient {
	return &MessageHTTPClientImpl{client}
}

func (c *MessageHTTPClientImpl) ListOfflineMessage(ctx context.Context, in *ListOfflineMessageRequest, opts ...http.CallOption) (*ListOfflineMessageReply, error) {
	var out ListOfflineMessageReply
	pattern := "/im/v1/message/list_offline"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMessageListOfflineMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
