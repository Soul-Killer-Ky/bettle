// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: im/service/v1/im.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Im_CreateIm_FullMethodName  = "/api.im.service.v1.Im/CreateIm"
	Im_UpdateIm_FullMethodName  = "/api.im.service.v1.Im/UpdateIm"
	Im_DeleteIm_FullMethodName  = "/api.im.service.v1.Im/DeleteIm"
	Im_GetIm_FullMethodName     = "/api.im.service.v1.Im/GetIm"
	Im_ListIm_FullMethodName    = "/api.im.service.v1.Im/ListIm"
	Im_ConnectIm_FullMethodName = "/api.im.service.v1.Im/ConnectIm"
	Im_GetGroup_FullMethodName  = "/api.im.service.v1.Im/GetGroup"
)

// ImClient is the client API for Im service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImClient interface {
	CreateIm(ctx context.Context, in *CreateImRequest, opts ...grpc.CallOption) (*CreateImReply, error)
	UpdateIm(ctx context.Context, in *UpdateImRequest, opts ...grpc.CallOption) (*UpdateImReply, error)
	DeleteIm(ctx context.Context, in *DeleteImRequest, opts ...grpc.CallOption) (*DeleteImReply, error)
	GetIm(ctx context.Context, in *GetImRequest, opts ...grpc.CallOption) (*GetImReply, error)
	ListIm(ctx context.Context, in *ListImRequest, opts ...grpc.CallOption) (*ListImReply, error)
	ConnectIm(ctx context.Context, in *ConnectImRequest, opts ...grpc.CallOption) (*ConnectImReply, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupReply, error)
}

type imClient struct {
	cc grpc.ClientConnInterface
}

func NewImClient(cc grpc.ClientConnInterface) ImClient {
	return &imClient{cc}
}

func (c *imClient) CreateIm(ctx context.Context, in *CreateImRequest, opts ...grpc.CallOption) (*CreateImReply, error) {
	out := new(CreateImReply)
	err := c.cc.Invoke(ctx, Im_CreateIm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imClient) UpdateIm(ctx context.Context, in *UpdateImRequest, opts ...grpc.CallOption) (*UpdateImReply, error) {
	out := new(UpdateImReply)
	err := c.cc.Invoke(ctx, Im_UpdateIm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imClient) DeleteIm(ctx context.Context, in *DeleteImRequest, opts ...grpc.CallOption) (*DeleteImReply, error) {
	out := new(DeleteImReply)
	err := c.cc.Invoke(ctx, Im_DeleteIm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imClient) GetIm(ctx context.Context, in *GetImRequest, opts ...grpc.CallOption) (*GetImReply, error) {
	out := new(GetImReply)
	err := c.cc.Invoke(ctx, Im_GetIm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imClient) ListIm(ctx context.Context, in *ListImRequest, opts ...grpc.CallOption) (*ListImReply, error) {
	out := new(ListImReply)
	err := c.cc.Invoke(ctx, Im_ListIm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imClient) ConnectIm(ctx context.Context, in *ConnectImRequest, opts ...grpc.CallOption) (*ConnectImReply, error) {
	out := new(ConnectImReply)
	err := c.cc.Invoke(ctx, Im_ConnectIm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupReply, error) {
	out := new(GetGroupReply)
	err := c.cc.Invoke(ctx, Im_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImServer is the server API for Im service.
// All implementations must embed UnimplementedImServer
// for forward compatibility
type ImServer interface {
	CreateIm(context.Context, *CreateImRequest) (*CreateImReply, error)
	UpdateIm(context.Context, *UpdateImRequest) (*UpdateImReply, error)
	DeleteIm(context.Context, *DeleteImRequest) (*DeleteImReply, error)
	GetIm(context.Context, *GetImRequest) (*GetImReply, error)
	ListIm(context.Context, *ListImRequest) (*ListImReply, error)
	ConnectIm(context.Context, *ConnectImRequest) (*ConnectImReply, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error)
	mustEmbedUnimplementedImServer()
}

// UnimplementedImServer must be embedded to have forward compatible implementations.
type UnimplementedImServer struct {
}

func (UnimplementedImServer) CreateIm(context.Context, *CreateImRequest) (*CreateImReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIm not implemented")
}
func (UnimplementedImServer) UpdateIm(context.Context, *UpdateImRequest) (*UpdateImReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIm not implemented")
}
func (UnimplementedImServer) DeleteIm(context.Context, *DeleteImRequest) (*DeleteImReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIm not implemented")
}
func (UnimplementedImServer) GetIm(context.Context, *GetImRequest) (*GetImReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIm not implemented")
}
func (UnimplementedImServer) ListIm(context.Context, *ListImRequest) (*ListImReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIm not implemented")
}
func (UnimplementedImServer) ConnectIm(context.Context, *ConnectImRequest) (*ConnectImReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectIm not implemented")
}
func (UnimplementedImServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedImServer) mustEmbedUnimplementedImServer() {}

// UnsafeImServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImServer will
// result in compilation errors.
type UnsafeImServer interface {
	mustEmbedUnimplementedImServer()
}

func RegisterImServer(s grpc.ServiceRegistrar, srv ImServer) {
	s.RegisterService(&Im_ServiceDesc, srv)
}

func _Im_CreateIm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServer).CreateIm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Im_CreateIm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServer).CreateIm(ctx, req.(*CreateImRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Im_UpdateIm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServer).UpdateIm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Im_UpdateIm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServer).UpdateIm(ctx, req.(*UpdateImRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Im_DeleteIm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServer).DeleteIm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Im_DeleteIm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServer).DeleteIm(ctx, req.(*DeleteImRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Im_GetIm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServer).GetIm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Im_GetIm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServer).GetIm(ctx, req.(*GetImRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Im_ListIm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServer).ListIm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Im_ListIm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServer).ListIm(ctx, req.(*ListImRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Im_ConnectIm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectImRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServer).ConnectIm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Im_ConnectIm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServer).ConnectIm(ctx, req.(*ConnectImRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Im_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Im_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Im_ServiceDesc is the grpc.ServiceDesc for Im service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Im_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.im.service.v1.Im",
	HandlerType: (*ImServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIm",
			Handler:    _Im_CreateIm_Handler,
		},
		{
			MethodName: "UpdateIm",
			Handler:    _Im_UpdateIm_Handler,
		},
		{
			MethodName: "DeleteIm",
			Handler:    _Im_DeleteIm_Handler,
		},
		{
			MethodName: "GetIm",
			Handler:    _Im_GetIm_Handler,
		},
		{
			MethodName: "ListIm",
			Handler:    _Im_ListIm_Handler,
		},
		{
			MethodName: "ConnectIm",
			Handler:    _Im_ConnectIm_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _Im_GetGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "im/service/v1/im.proto",
}
