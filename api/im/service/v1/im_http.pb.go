// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.6.1
// source: im/service/v1/im.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationImConnectIm = "/api.im.service.v1.Im/ConnectIm"

type ImHTTPServer interface {
	ConnectIm(context.Context, *ConnectImRequest) (*ConnectImReply, error)
}

func RegisterImHTTPServer(s *http.Server, srv ImHTTPServer) {
	r := s.Route("/")
	r.GET("/im/v1/connect", _Im_ConnectIm0_HTTP_Handler(srv))
}

func _Im_ConnectIm0_HTTP_Handler(srv ImHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConnectImRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationImConnectIm)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConnectIm(ctx, req.(*ConnectImRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConnectImReply)
		return ctx.Result(200, reply)
	}
}

type ImHTTPClient interface {
	ConnectIm(ctx context.Context, req *ConnectImRequest, opts ...http.CallOption) (rsp *ConnectImReply, err error)
}

type ImHTTPClientImpl struct {
	cc *http.Client
}

func NewImHTTPClient(client *http.Client) ImHTTPClient {
	return &ImHTTPClientImpl{client}
}

func (c *ImHTTPClientImpl) ConnectIm(ctx context.Context, in *ConnectImRequest, opts ...http.CallOption) (*ConnectImReply, error) {
	var out ConnectImReply
	pattern := "/im/v1/connect"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationImConnectIm))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
