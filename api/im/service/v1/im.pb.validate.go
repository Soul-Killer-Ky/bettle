// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/im/service/v1/im.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateImRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateImRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateImRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateImRequestMultiError, or nil if none found.
func (m *CreateImRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateImRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateImRequestMultiError(errors)
	}

	return nil
}

// CreateImRequestMultiError is an error wrapping multiple validation errors
// returned by CreateImRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateImRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateImRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateImRequestMultiError) AllErrors() []error { return m }

// CreateImRequestValidationError is the validation error returned by
// CreateImRequest.Validate if the designated constraints aren't met.
type CreateImRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateImRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateImRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateImRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateImRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateImRequestValidationError) ErrorName() string { return "CreateImRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateImRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateImRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateImRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateImRequestValidationError{}

// Validate checks the field values on CreateImReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateImReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateImReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateImReplyMultiError, or
// nil if none found.
func (m *CreateImReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateImReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateImReplyMultiError(errors)
	}

	return nil
}

// CreateImReplyMultiError is an error wrapping multiple validation errors
// returned by CreateImReply.ValidateAll() if the designated constraints
// aren't met.
type CreateImReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateImReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateImReplyMultiError) AllErrors() []error { return m }

// CreateImReplyValidationError is the validation error returned by
// CreateImReply.Validate if the designated constraints aren't met.
type CreateImReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateImReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateImReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateImReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateImReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateImReplyValidationError) ErrorName() string { return "CreateImReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateImReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateImReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateImReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateImReplyValidationError{}

// Validate checks the field values on UpdateImRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateImRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateImRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateImRequestMultiError, or nil if none found.
func (m *UpdateImRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateImRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateImRequestMultiError(errors)
	}

	return nil
}

// UpdateImRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateImRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateImRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateImRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateImRequestMultiError) AllErrors() []error { return m }

// UpdateImRequestValidationError is the validation error returned by
// UpdateImRequest.Validate if the designated constraints aren't met.
type UpdateImRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateImRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateImRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateImRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateImRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateImRequestValidationError) ErrorName() string { return "UpdateImRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateImRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateImRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateImRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateImRequestValidationError{}

// Validate checks the field values on UpdateImReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateImReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateImReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateImReplyMultiError, or
// nil if none found.
func (m *UpdateImReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateImReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateImReplyMultiError(errors)
	}

	return nil
}

// UpdateImReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateImReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateImReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateImReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateImReplyMultiError) AllErrors() []error { return m }

// UpdateImReplyValidationError is the validation error returned by
// UpdateImReply.Validate if the designated constraints aren't met.
type UpdateImReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateImReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateImReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateImReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateImReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateImReplyValidationError) ErrorName() string { return "UpdateImReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateImReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateImReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateImReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateImReplyValidationError{}

// Validate checks the field values on DeleteImRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteImRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteImRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteImRequestMultiError, or nil if none found.
func (m *DeleteImRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteImRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteImRequestMultiError(errors)
	}

	return nil
}

// DeleteImRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteImRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteImRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteImRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteImRequestMultiError) AllErrors() []error { return m }

// DeleteImRequestValidationError is the validation error returned by
// DeleteImRequest.Validate if the designated constraints aren't met.
type DeleteImRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteImRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteImRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteImRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteImRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteImRequestValidationError) ErrorName() string { return "DeleteImRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteImRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteImRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteImRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteImRequestValidationError{}

// Validate checks the field values on DeleteImReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteImReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteImReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteImReplyMultiError, or
// nil if none found.
func (m *DeleteImReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteImReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteImReplyMultiError(errors)
	}

	return nil
}

// DeleteImReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteImReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteImReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteImReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteImReplyMultiError) AllErrors() []error { return m }

// DeleteImReplyValidationError is the validation error returned by
// DeleteImReply.Validate if the designated constraints aren't met.
type DeleteImReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteImReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteImReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteImReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteImReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteImReplyValidationError) ErrorName() string { return "DeleteImReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteImReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteImReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteImReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteImReplyValidationError{}

// Validate checks the field values on GetImRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetImRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetImRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetImRequestMultiError, or
// nil if none found.
func (m *GetImRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetImRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetImRequestMultiError(errors)
	}

	return nil
}

// GetImRequestMultiError is an error wrapping multiple validation errors
// returned by GetImRequest.ValidateAll() if the designated constraints aren't met.
type GetImRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetImRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetImRequestMultiError) AllErrors() []error { return m }

// GetImRequestValidationError is the validation error returned by
// GetImRequest.Validate if the designated constraints aren't met.
type GetImRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetImRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetImRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetImRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetImRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetImRequestValidationError) ErrorName() string { return "GetImRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetImRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetImRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetImRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetImRequestValidationError{}

// Validate checks the field values on GetImReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetImReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetImReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetImReplyMultiError, or
// nil if none found.
func (m *GetImReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetImReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetImReplyMultiError(errors)
	}

	return nil
}

// GetImReplyMultiError is an error wrapping multiple validation errors
// returned by GetImReply.ValidateAll() if the designated constraints aren't met.
type GetImReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetImReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetImReplyMultiError) AllErrors() []error { return m }

// GetImReplyValidationError is the validation error returned by
// GetImReply.Validate if the designated constraints aren't met.
type GetImReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetImReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetImReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetImReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetImReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetImReplyValidationError) ErrorName() string { return "GetImReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetImReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetImReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetImReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetImReplyValidationError{}

// Validate checks the field values on ListImRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListImRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListImRequestMultiError, or
// nil if none found.
func (m *ListImRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListImRequestMultiError(errors)
	}

	return nil
}

// ListImRequestMultiError is an error wrapping multiple validation errors
// returned by ListImRequest.ValidateAll() if the designated constraints
// aren't met.
type ListImRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImRequestMultiError) AllErrors() []error { return m }

// ListImRequestValidationError is the validation error returned by
// ListImRequest.Validate if the designated constraints aren't met.
type ListImRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImRequestValidationError) ErrorName() string { return "ListImRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListImRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImRequestValidationError{}

// Validate checks the field values on ListImReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListImReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListImReplyMultiError, or
// nil if none found.
func (m *ListImReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListImReplyMultiError(errors)
	}

	return nil
}

// ListImReplyMultiError is an error wrapping multiple validation errors
// returned by ListImReply.ValidateAll() if the designated constraints aren't met.
type ListImReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImReplyMultiError) AllErrors() []error { return m }

// ListImReplyValidationError is the validation error returned by
// ListImReply.Validate if the designated constraints aren't met.
type ListImReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImReplyValidationError) ErrorName() string { return "ListImReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListImReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImReplyValidationError{}

// Validate checks the field values on ConnectImRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConnectImRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectImRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectImRequestMultiError, or nil if none found.
func (m *ConnectImRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectImRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConnectImRequestMultiError(errors)
	}

	return nil
}

// ConnectImRequestMultiError is an error wrapping multiple validation errors
// returned by ConnectImRequest.ValidateAll() if the designated constraints
// aren't met.
type ConnectImRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectImRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectImRequestMultiError) AllErrors() []error { return m }

// ConnectImRequestValidationError is the validation error returned by
// ConnectImRequest.Validate if the designated constraints aren't met.
type ConnectImRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectImRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectImRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectImRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectImRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectImRequestValidationError) ErrorName() string { return "ConnectImRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConnectImRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectImRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectImRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectImRequestValidationError{}

// Validate checks the field values on ConnectImReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConnectImReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectImReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConnectImReplyMultiError,
// or nil if none found.
func (m *ConnectImReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectImReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConnectImReplyMultiError(errors)
	}

	return nil
}

// ConnectImReplyMultiError is an error wrapping multiple validation errors
// returned by ConnectImReply.ValidateAll() if the designated constraints
// aren't met.
type ConnectImReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectImReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectImReplyMultiError) AllErrors() []error { return m }

// ConnectImReplyValidationError is the validation error returned by
// ConnectImReply.Validate if the designated constraints aren't met.
type ConnectImReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectImReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectImReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectImReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectImReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectImReplyValidationError) ErrorName() string { return "ConnectImReplyValidationError" }

// Error satisfies the builtin error interface
func (e ConnectImReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectImReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectImReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectImReplyValidationError{}

// Validate checks the field values on GetGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestMultiError, or nil if none found.
func (m *GetGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGroupRequestMultiError(errors)
	}

	return nil
}

// GetGroupRequestMultiError is an error wrapping multiple validation errors
// returned by GetGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestMultiError) AllErrors() []error { return m }

// GetGroupRequestValidationError is the validation error returned by
// GetGroupRequest.Validate if the designated constraints aren't met.
type GetGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestValidationError) ErrorName() string { return "GetGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestValidationError{}

// Validate checks the field values on GetGroupReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGroupReplyMultiError, or
// nil if none found.
func (m *GetGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupReplyValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupReplyValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupReplyValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupReplyMultiError(errors)
	}

	return nil
}

// GetGroupReplyMultiError is an error wrapping multiple validation errors
// returned by GetGroupReply.ValidateAll() if the designated constraints
// aren't met.
type GetGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupReplyMultiError) AllErrors() []error { return m }

// GetGroupReplyValidationError is the validation error returned by
// GetGroupReply.Validate if the designated constraints aren't met.
type GetGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupReplyValidationError) ErrorName() string { return "GetGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupReplyValidationError{}

// Validate checks the field values on GetGroupReply_Group with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupReply_Group) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupReply_Group with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupReply_GroupMultiError, or nil if none found.
func (m *GetGroupReply_Group) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupReply_Group) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Icon

	// no validation rules for Memo

	if len(errors) > 0 {
		return GetGroupReply_GroupMultiError(errors)
	}

	return nil
}

// GetGroupReply_GroupMultiError is an error wrapping multiple validation
// errors returned by GetGroupReply_Group.ValidateAll() if the designated
// constraints aren't met.
type GetGroupReply_GroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupReply_GroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupReply_GroupMultiError) AllErrors() []error { return m }

// GetGroupReply_GroupValidationError is the validation error returned by
// GetGroupReply_Group.Validate if the designated constraints aren't met.
type GetGroupReply_GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupReply_GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupReply_GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupReply_GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupReply_GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupReply_GroupValidationError) ErrorName() string {
	return "GetGroupReply_GroupValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupReply_GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupReply_Group.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupReply_GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupReply_GroupValidationError{}
