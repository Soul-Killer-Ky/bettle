// Code generated by ent, DO NOT EDIT.

package ent

import (
	"beetle/app/filesystem/internal/data/ent/predicate"
	"beetle/app/filesystem/internal/data/ent/quote"
	"beetle/app/filesystem/internal/data/ent/storage"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuoteUpdate is the builder for updating Quote entities.
type QuoteUpdate struct {
	config
	hooks    []Hook
	mutation *QuoteMutation
}

// Where appends a list predicates to the QuoteUpdate builder.
func (qu *QuoteUpdate) Where(ps ...predicate.Quote) *QuoteUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetDeletedAt sets the "deleted_at" field.
func (qu *QuoteUpdate) SetDeletedAt(t time.Time) *QuoteUpdate {
	qu.mutation.SetDeletedAt(t)
	return qu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qu *QuoteUpdate) SetNillableDeletedAt(t *time.Time) *QuoteUpdate {
	if t != nil {
		qu.SetDeletedAt(*t)
	}
	return qu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (qu *QuoteUpdate) ClearDeletedAt() *QuoteUpdate {
	qu.mutation.ClearDeletedAt()
	return qu
}

// SetName sets the "name" field.
func (qu *QuoteUpdate) SetName(s string) *QuoteUpdate {
	qu.mutation.SetName(s)
	return qu
}

// SetCreatedBy sets the "created_by" field.
func (qu *QuoteUpdate) SetCreatedBy(i int) *QuoteUpdate {
	qu.mutation.ResetCreatedBy()
	qu.mutation.SetCreatedBy(i)
	return qu
}

// AddCreatedBy adds i to the "created_by" field.
func (qu *QuoteUpdate) AddCreatedBy(i int) *QuoteUpdate {
	qu.mutation.AddCreatedBy(i)
	return qu
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (qu *QuoteUpdate) SetStorageID(id int) *QuoteUpdate {
	qu.mutation.SetStorageID(id)
	return qu
}

// SetNillableStorageID sets the "storage" edge to the Storage entity by ID if the given value is not nil.
func (qu *QuoteUpdate) SetNillableStorageID(id *int) *QuoteUpdate {
	if id != nil {
		qu = qu.SetStorageID(*id)
	}
	return qu
}

// SetStorage sets the "storage" edge to the Storage entity.
func (qu *QuoteUpdate) SetStorage(s *Storage) *QuoteUpdate {
	return qu.SetStorageID(s.ID)
}

// Mutation returns the QuoteMutation object of the builder.
func (qu *QuoteUpdate) Mutation() *QuoteMutation {
	return qu.mutation
}

// ClearStorage clears the "storage" edge to the Storage entity.
func (qu *QuoteUpdate) ClearStorage() *QuoteUpdate {
	qu.mutation.ClearStorage()
	return qu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuoteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuoteUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuoteUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuoteUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qu *QuoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(quote.Table, quote.Columns, sqlgraph.NewFieldSpec(quote.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.DeletedAt(); ok {
		_spec.SetField(quote.FieldDeletedAt, field.TypeTime, value)
	}
	if qu.mutation.DeletedAtCleared() {
		_spec.ClearField(quote.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := qu.mutation.Name(); ok {
		_spec.SetField(quote.FieldName, field.TypeString, value)
	}
	if value, ok := qu.mutation.CreatedBy(); ok {
		_spec.SetField(quote.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(quote.FieldCreatedBy, field.TypeInt, value)
	}
	if qu.mutation.StorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quote.StorageTable,
			Columns: []string{quote.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quote.StorageTable,
			Columns: []string{quote.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuoteUpdateOne is the builder for updating a single Quote entity.
type QuoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuoteMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (quo *QuoteUpdateOne) SetDeletedAt(t time.Time) *QuoteUpdateOne {
	quo.mutation.SetDeletedAt(t)
	return quo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (quo *QuoteUpdateOne) SetNillableDeletedAt(t *time.Time) *QuoteUpdateOne {
	if t != nil {
		quo.SetDeletedAt(*t)
	}
	return quo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (quo *QuoteUpdateOne) ClearDeletedAt() *QuoteUpdateOne {
	quo.mutation.ClearDeletedAt()
	return quo
}

// SetName sets the "name" field.
func (quo *QuoteUpdateOne) SetName(s string) *QuoteUpdateOne {
	quo.mutation.SetName(s)
	return quo
}

// SetCreatedBy sets the "created_by" field.
func (quo *QuoteUpdateOne) SetCreatedBy(i int) *QuoteUpdateOne {
	quo.mutation.ResetCreatedBy()
	quo.mutation.SetCreatedBy(i)
	return quo
}

// AddCreatedBy adds i to the "created_by" field.
func (quo *QuoteUpdateOne) AddCreatedBy(i int) *QuoteUpdateOne {
	quo.mutation.AddCreatedBy(i)
	return quo
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (quo *QuoteUpdateOne) SetStorageID(id int) *QuoteUpdateOne {
	quo.mutation.SetStorageID(id)
	return quo
}

// SetNillableStorageID sets the "storage" edge to the Storage entity by ID if the given value is not nil.
func (quo *QuoteUpdateOne) SetNillableStorageID(id *int) *QuoteUpdateOne {
	if id != nil {
		quo = quo.SetStorageID(*id)
	}
	return quo
}

// SetStorage sets the "storage" edge to the Storage entity.
func (quo *QuoteUpdateOne) SetStorage(s *Storage) *QuoteUpdateOne {
	return quo.SetStorageID(s.ID)
}

// Mutation returns the QuoteMutation object of the builder.
func (quo *QuoteUpdateOne) Mutation() *QuoteMutation {
	return quo.mutation
}

// ClearStorage clears the "storage" edge to the Storage entity.
func (quo *QuoteUpdateOne) ClearStorage() *QuoteUpdateOne {
	quo.mutation.ClearStorage()
	return quo
}

// Where appends a list predicates to the QuoteUpdate builder.
func (quo *QuoteUpdateOne) Where(ps ...predicate.Quote) *QuoteUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuoteUpdateOne) Select(field string, fields ...string) *QuoteUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Quote entity.
func (quo *QuoteUpdateOne) Save(ctx context.Context) (*Quote, error) {
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuoteUpdateOne) SaveX(ctx context.Context) *Quote {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuoteUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuoteUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (quo *QuoteUpdateOne) sqlSave(ctx context.Context) (_node *Quote, err error) {
	_spec := sqlgraph.NewUpdateSpec(quote.Table, quote.Columns, sqlgraph.NewFieldSpec(quote.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Quote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, quote.FieldID)
		for _, f := range fields {
			if !quote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != quote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.DeletedAt(); ok {
		_spec.SetField(quote.FieldDeletedAt, field.TypeTime, value)
	}
	if quo.mutation.DeletedAtCleared() {
		_spec.ClearField(quote.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := quo.mutation.Name(); ok {
		_spec.SetField(quote.FieldName, field.TypeString, value)
	}
	if value, ok := quo.mutation.CreatedBy(); ok {
		_spec.SetField(quote.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(quote.FieldCreatedBy, field.TypeInt, value)
	}
	if quo.mutation.StorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quote.StorageTable,
			Columns: []string{quote.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quote.StorageTable,
			Columns: []string{quote.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Quote{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
