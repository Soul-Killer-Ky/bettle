// Code generated by ent, DO NOT EDIT.

package storage

import (
	"beetle/app/filesystem/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldDeletedAt, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldType, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldPath, v))
}

// Md5 applies equality check predicate on the "md5" field. It's identical to Md5EQ.
func Md5(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldMd5, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Storage {
	return predicate.Storage(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Storage {
	return predicate.Storage(sql.FieldNotNull(FieldDeletedAt))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int32) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int32) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int32) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldType, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldPath, v))
}

// Md5EQ applies the EQ predicate on the "md5" field.
func Md5EQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldMd5, v))
}

// Md5NEQ applies the NEQ predicate on the "md5" field.
func Md5NEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldMd5, v))
}

// Md5In applies the In predicate on the "md5" field.
func Md5In(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldMd5, vs...))
}

// Md5NotIn applies the NotIn predicate on the "md5" field.
func Md5NotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldMd5, vs...))
}

// Md5GT applies the GT predicate on the "md5" field.
func Md5GT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldMd5, v))
}

// Md5GTE applies the GTE predicate on the "md5" field.
func Md5GTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldMd5, v))
}

// Md5LT applies the LT predicate on the "md5" field.
func Md5LT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldMd5, v))
}

// Md5LTE applies the LTE predicate on the "md5" field.
func Md5LTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldMd5, v))
}

// Md5Contains applies the Contains predicate on the "md5" field.
func Md5Contains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldMd5, v))
}

// Md5HasPrefix applies the HasPrefix predicate on the "md5" field.
func Md5HasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldMd5, v))
}

// Md5HasSuffix applies the HasSuffix predicate on the "md5" field.
func Md5HasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldMd5, v))
}

// Md5EqualFold applies the EqualFold predicate on the "md5" field.
func Md5EqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldMd5, v))
}

// Md5ContainsFold applies the ContainsFold predicate on the "md5" field.
func Md5ContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldMd5, v))
}

// HasQuotes applies the HasEdge predicate on the "quotes" edge.
func HasQuotes() predicate.Storage {
	return predicate.Storage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuotesTable, QuotesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuotesWith applies the HasEdge predicate on the "quotes" edge with a given conditions (other predicates).
func HasQuotesWith(preds ...predicate.Quote) predicate.Storage {
	return predicate.Storage(func(s *sql.Selector) {
		step := newQuotesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Storage) predicate.Storage {
	return predicate.Storage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Storage) predicate.Storage {
	return predicate.Storage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Storage) predicate.Storage {
	return predicate.Storage(func(s *sql.Selector) {
		p(s.Not())
	})
}
