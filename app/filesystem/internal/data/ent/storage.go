// Code generated by ent, DO NOT EDIT.

package ent

import (
	"beetle/app/filesystem/internal/data/ent/storage"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Storage is the model entity for the Storage schema.
type Storage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 类型
	Type int32 `json:"type,omitempty"`
	// 存储路径
	Path string `json:"path,omitempty"`
	// md5编码
	Md5 string `json:"md5,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StorageQuery when eager-loading is set.
	Edges        StorageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StorageEdges holds the relations/edges for other nodes in the graph.
type StorageEdges struct {
	// Quotes holds the value of the quotes edge.
	Quotes []*Quote `json:"quotes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QuotesOrErr returns the Quotes value or an error if the edge
// was not loaded in eager-loading.
func (e StorageEdges) QuotesOrErr() ([]*Quote, error) {
	if e.loadedTypes[0] {
		return e.Quotes, nil
	}
	return nil, &NotLoadedError{edge: "quotes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Storage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case storage.FieldID, storage.FieldType:
			values[i] = new(sql.NullInt64)
		case storage.FieldPath, storage.FieldMd5:
			values[i] = new(sql.NullString)
		case storage.FieldCreatedAt, storage.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Storage fields.
func (s *Storage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case storage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case storage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case storage.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = new(time.Time)
				*s.DeletedAt = value.Time
			}
		case storage.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = int32(value.Int64)
			}
		case storage.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				s.Path = value.String
			}
		case storage.FieldMd5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field md5", values[i])
			} else if value.Valid {
				s.Md5 = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Storage.
// This includes values selected through modifiers, order, etc.
func (s *Storage) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryQuotes queries the "quotes" edge of the Storage entity.
func (s *Storage) QueryQuotes() *QuoteQuery {
	return NewStorageClient(s.config).QueryQuotes(s)
}

// Update returns a builder for updating this Storage.
// Note that you need to call Storage.Unwrap() before calling this method if this Storage
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Storage) Update() *StorageUpdateOne {
	return NewStorageClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Storage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Storage) Unwrap() *Storage {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Storage is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Storage) String() string {
	var builder strings.Builder
	builder.WriteString("Storage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := s.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(s.Path)
	builder.WriteString(", ")
	builder.WriteString("md5=")
	builder.WriteString(s.Md5)
	builder.WriteByte(')')
	return builder.String()
}

// Storages is a parsable slice of Storage.
type Storages []*Storage
