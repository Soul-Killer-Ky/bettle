// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"beetle/app/filesystem/internal/data/ent/migrate"

	"beetle/app/filesystem/internal/data/ent/quote"
	"beetle/app/filesystem/internal/data/ent/storage"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Quote is the client for interacting with the Quote builders.
	Quote *QuoteClient
	// Storage is the client for interacting with the Storage builders.
	Storage *StorageClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Quote = NewQuoteClient(c.config)
	c.Storage = NewStorageClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Quote:   NewQuoteClient(cfg),
		Storage: NewStorageClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Quote:   NewQuoteClient(cfg),
		Storage: NewStorageClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Quote.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Quote.Use(hooks...)
	c.Storage.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Quote.Intercept(interceptors...)
	c.Storage.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *QuoteMutation:
		return c.Quote.mutate(ctx, m)
	case *StorageMutation:
		return c.Storage.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// QuoteClient is a client for the Quote schema.
type QuoteClient struct {
	config
}

// NewQuoteClient returns a client for the Quote from the given config.
func NewQuoteClient(c config) *QuoteClient {
	return &QuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `quote.Hooks(f(g(h())))`.
func (c *QuoteClient) Use(hooks ...Hook) {
	c.hooks.Quote = append(c.hooks.Quote, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `quote.Intercept(f(g(h())))`.
func (c *QuoteClient) Intercept(interceptors ...Interceptor) {
	c.inters.Quote = append(c.inters.Quote, interceptors...)
}

// Create returns a builder for creating a Quote entity.
func (c *QuoteClient) Create() *QuoteCreate {
	mutation := newQuoteMutation(c.config, OpCreate)
	return &QuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Quote entities.
func (c *QuoteClient) CreateBulk(builders ...*QuoteCreate) *QuoteCreateBulk {
	return &QuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Quote.
func (c *QuoteClient) Update() *QuoteUpdate {
	mutation := newQuoteMutation(c.config, OpUpdate)
	return &QuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuoteClient) UpdateOne(q *Quote) *QuoteUpdateOne {
	mutation := newQuoteMutation(c.config, OpUpdateOne, withQuote(q))
	return &QuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuoteClient) UpdateOneID(id int) *QuoteUpdateOne {
	mutation := newQuoteMutation(c.config, OpUpdateOne, withQuoteID(id))
	return &QuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Quote.
func (c *QuoteClient) Delete() *QuoteDelete {
	mutation := newQuoteMutation(c.config, OpDelete)
	return &QuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuoteClient) DeleteOne(q *Quote) *QuoteDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuoteClient) DeleteOneID(id int) *QuoteDeleteOne {
	builder := c.Delete().Where(quote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuoteDeleteOne{builder}
}

// Query returns a query builder for Quote.
func (c *QuoteClient) Query() *QuoteQuery {
	return &QuoteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuote},
		inters: c.Interceptors(),
	}
}

// Get returns a Quote entity by its id.
func (c *QuoteClient) Get(ctx context.Context, id int) (*Quote, error) {
	return c.Query().Where(quote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuoteClient) GetX(ctx context.Context, id int) *Quote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStorage queries the storage edge of a Quote.
func (c *QuoteClient) QueryStorage(q *Quote) *StorageQuery {
	query := (&StorageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(quote.Table, quote.FieldID, id),
			sqlgraph.To(storage.Table, storage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, quote.StorageTable, quote.StorageColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuoteClient) Hooks() []Hook {
	hooks := c.hooks.Quote
	return append(hooks[:len(hooks):len(hooks)], quote.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *QuoteClient) Interceptors() []Interceptor {
	inters := c.inters.Quote
	return append(inters[:len(inters):len(inters)], quote.Interceptors[:]...)
}

func (c *QuoteClient) mutate(ctx context.Context, m *QuoteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuoteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuoteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Quote mutation op: %q", m.Op())
	}
}

// StorageClient is a client for the Storage schema.
type StorageClient struct {
	config
}

// NewStorageClient returns a client for the Storage from the given config.
func NewStorageClient(c config) *StorageClient {
	return &StorageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storage.Hooks(f(g(h())))`.
func (c *StorageClient) Use(hooks ...Hook) {
	c.hooks.Storage = append(c.hooks.Storage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `storage.Intercept(f(g(h())))`.
func (c *StorageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Storage = append(c.inters.Storage, interceptors...)
}

// Create returns a builder for creating a Storage entity.
func (c *StorageClient) Create() *StorageCreate {
	mutation := newStorageMutation(c.config, OpCreate)
	return &StorageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Storage entities.
func (c *StorageClient) CreateBulk(builders ...*StorageCreate) *StorageCreateBulk {
	return &StorageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Storage.
func (c *StorageClient) Update() *StorageUpdate {
	mutation := newStorageMutation(c.config, OpUpdate)
	return &StorageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StorageClient) UpdateOne(s *Storage) *StorageUpdateOne {
	mutation := newStorageMutation(c.config, OpUpdateOne, withStorage(s))
	return &StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StorageClient) UpdateOneID(id int) *StorageUpdateOne {
	mutation := newStorageMutation(c.config, OpUpdateOne, withStorageID(id))
	return &StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Storage.
func (c *StorageClient) Delete() *StorageDelete {
	mutation := newStorageMutation(c.config, OpDelete)
	return &StorageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StorageClient) DeleteOne(s *Storage) *StorageDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StorageClient) DeleteOneID(id int) *StorageDeleteOne {
	builder := c.Delete().Where(storage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StorageDeleteOne{builder}
}

// Query returns a query builder for Storage.
func (c *StorageClient) Query() *StorageQuery {
	return &StorageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStorage},
		inters: c.Interceptors(),
	}
}

// Get returns a Storage entity by its id.
func (c *StorageClient) Get(ctx context.Context, id int) (*Storage, error) {
	return c.Query().Where(storage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StorageClient) GetX(ctx context.Context, id int) *Storage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuotes queries the quotes edge of a Storage.
func (c *StorageClient) QueryQuotes(s *Storage) *QuoteQuery {
	query := (&QuoteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(storage.Table, storage.FieldID, id),
			sqlgraph.To(quote.Table, quote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, storage.QuotesTable, storage.QuotesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StorageClient) Hooks() []Hook {
	hooks := c.hooks.Storage
	return append(hooks[:len(hooks):len(hooks)], storage.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *StorageClient) Interceptors() []Interceptor {
	inters := c.inters.Storage
	return append(inters[:len(inters):len(inters)], storage.Interceptors[:]...)
}

func (c *StorageClient) mutate(ctx context.Context, m *StorageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StorageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StorageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StorageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Storage mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Quote, Storage []ent.Hook
	}
	inters struct {
		Quote, Storage []ent.Interceptor
	}
)
