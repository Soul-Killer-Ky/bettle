// Code generated by ent, DO NOT EDIT.

package ent

import (
	"beetle/app/filesystem/internal/data/ent/quote"
	"beetle/app/filesystem/internal/data/ent/storage"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuoteCreate is the builder for creating a Quote entity.
type QuoteCreate struct {
	config
	mutation *QuoteMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (qc *QuoteCreate) SetCreatedAt(t time.Time) *QuoteCreate {
	qc.mutation.SetCreatedAt(t)
	return qc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qc *QuoteCreate) SetNillableCreatedAt(t *time.Time) *QuoteCreate {
	if t != nil {
		qc.SetCreatedAt(*t)
	}
	return qc
}

// SetDeletedAt sets the "deleted_at" field.
func (qc *QuoteCreate) SetDeletedAt(t time.Time) *QuoteCreate {
	qc.mutation.SetDeletedAt(t)
	return qc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qc *QuoteCreate) SetNillableDeletedAt(t *time.Time) *QuoteCreate {
	if t != nil {
		qc.SetDeletedAt(*t)
	}
	return qc
}

// SetName sets the "name" field.
func (qc *QuoteCreate) SetName(s string) *QuoteCreate {
	qc.mutation.SetName(s)
	return qc
}

// SetCreatedBy sets the "created_by" field.
func (qc *QuoteCreate) SetCreatedBy(i int) *QuoteCreate {
	qc.mutation.SetCreatedBy(i)
	return qc
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (qc *QuoteCreate) SetStorageID(id int) *QuoteCreate {
	qc.mutation.SetStorageID(id)
	return qc
}

// SetNillableStorageID sets the "storage" edge to the Storage entity by ID if the given value is not nil.
func (qc *QuoteCreate) SetNillableStorageID(id *int) *QuoteCreate {
	if id != nil {
		qc = qc.SetStorageID(*id)
	}
	return qc
}

// SetStorage sets the "storage" edge to the Storage entity.
func (qc *QuoteCreate) SetStorage(s *Storage) *QuoteCreate {
	return qc.SetStorageID(s.ID)
}

// Mutation returns the QuoteMutation object of the builder.
func (qc *QuoteCreate) Mutation() *QuoteMutation {
	return qc.mutation
}

// Save creates the Quote in the database.
func (qc *QuoteCreate) Save(ctx context.Context) (*Quote, error) {
	if err := qc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, qc.sqlSave, qc.mutation, qc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuoteCreate) SaveX(ctx context.Context) *Quote {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QuoteCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QuoteCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QuoteCreate) defaults() error {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		if quote.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized quote.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := quote.DefaultCreatedAt()
		qc.mutation.SetCreatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (qc *QuoteCreate) check() error {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Quote.created_at"`)}
	}
	if _, ok := qc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Quote.name"`)}
	}
	if _, ok := qc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Quote.created_by"`)}
	}
	return nil
}

func (qc *QuoteCreate) sqlSave(ctx context.Context) (*Quote, error) {
	if err := qc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	qc.mutation.id = &_node.ID
	qc.mutation.done = true
	return _node, nil
}

func (qc *QuoteCreate) createSpec() (*Quote, *sqlgraph.CreateSpec) {
	var (
		_node = &Quote{config: qc.config}
		_spec = sqlgraph.NewCreateSpec(quote.Table, sqlgraph.NewFieldSpec(quote.FieldID, field.TypeInt))
	)
	if value, ok := qc.mutation.CreatedAt(); ok {
		_spec.SetField(quote.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := qc.mutation.DeletedAt(); ok {
		_spec.SetField(quote.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := qc.mutation.Name(); ok {
		_spec.SetField(quote.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := qc.mutation.CreatedBy(); ok {
		_spec.SetField(quote.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if nodes := qc.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quote.StorageTable,
			Columns: []string{quote.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.storage_quotes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuoteCreateBulk is the builder for creating many Quote entities in bulk.
type QuoteCreateBulk struct {
	config
	builders []*QuoteCreate
}

// Save creates the Quote entities in the database.
func (qcb *QuoteCreateBulk) Save(ctx context.Context) ([]*Quote, error) {
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Quote, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QuoteCreateBulk) SaveX(ctx context.Context) []*Quote {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QuoteCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QuoteCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}
