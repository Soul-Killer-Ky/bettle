// Code generated by ent, DO NOT EDIT.

package ent

import (
	"beetle/app/filesystem/internal/data/ent/quote"
	"beetle/app/filesystem/internal/data/ent/storage"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Quote is the model entity for the Quote schema.
type Quote struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 上传者
	CreatedBy int `json:"created_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuoteQuery when eager-loading is set.
	Edges          QuoteEdges `json:"edges"`
	storage_quotes *int
	selectValues   sql.SelectValues
}

// QuoteEdges holds the relations/edges for other nodes in the graph.
type QuoteEdges struct {
	// Storage holds the value of the storage edge.
	Storage *Storage `json:"storage,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StorageOrErr returns the Storage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuoteEdges) StorageOrErr() (*Storage, error) {
	if e.loadedTypes[0] {
		if e.Storage == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: storage.Label}
		}
		return e.Storage, nil
	}
	return nil, &NotLoadedError{edge: "storage"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Quote) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case quote.FieldID, quote.FieldCreatedBy:
			values[i] = new(sql.NullInt64)
		case quote.FieldName:
			values[i] = new(sql.NullString)
		case quote.FieldCreatedAt, quote.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case quote.ForeignKeys[0]: // storage_quotes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Quote fields.
func (q *Quote) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case quote.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case quote.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				q.CreatedAt = value.Time
			}
		case quote.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				q.DeletedAt = new(time.Time)
				*q.DeletedAt = value.Time
			}
		case quote.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				q.Name = value.String
			}
		case quote.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				q.CreatedBy = int(value.Int64)
			}
		case quote.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field storage_quotes", value)
			} else if value.Valid {
				q.storage_quotes = new(int)
				*q.storage_quotes = int(value.Int64)
			}
		default:
			q.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Quote.
// This includes values selected through modifiers, order, etc.
func (q *Quote) Value(name string) (ent.Value, error) {
	return q.selectValues.Get(name)
}

// QueryStorage queries the "storage" edge of the Quote entity.
func (q *Quote) QueryStorage() *StorageQuery {
	return NewQuoteClient(q.config).QueryStorage(q)
}

// Update returns a builder for updating this Quote.
// Note that you need to call Quote.Unwrap() before calling this method if this Quote
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Quote) Update() *QuoteUpdateOne {
	return NewQuoteClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Quote entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Quote) Unwrap() *Quote {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Quote is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Quote) String() string {
	var builder strings.Builder
	builder.WriteString("Quote(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("created_at=")
	builder.WriteString(q.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := q.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(q.Name)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", q.CreatedBy))
	builder.WriteByte(')')
	return builder.String()
}

// Quotes is a parsable slice of Quote.
type Quotes []*Quote
