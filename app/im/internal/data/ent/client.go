// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"beetle/app/im/internal/data/ent/migrate"

	"beetle/app/im/internal/data/ent/groupchatmessage"
	"beetle/app/im/internal/data/ent/personalchatmessage"
	"beetle/app/im/internal/data/ent/synchronizerecord"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// GroupChatMessage is the client for interacting with the GroupChatMessage builders.
	GroupChatMessage *GroupChatMessageClient
	// PersonalChatMessage is the client for interacting with the PersonalChatMessage builders.
	PersonalChatMessage *PersonalChatMessageClient
	// SynchronizeRecord is the client for interacting with the SynchronizeRecord builders.
	SynchronizeRecord *SynchronizeRecordClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.GroupChatMessage = NewGroupChatMessageClient(c.config)
	c.PersonalChatMessage = NewPersonalChatMessageClient(c.config)
	c.SynchronizeRecord = NewSynchronizeRecordClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		GroupChatMessage:    NewGroupChatMessageClient(cfg),
		PersonalChatMessage: NewPersonalChatMessageClient(cfg),
		SynchronizeRecord:   NewSynchronizeRecordClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		GroupChatMessage:    NewGroupChatMessageClient(cfg),
		PersonalChatMessage: NewPersonalChatMessageClient(cfg),
		SynchronizeRecord:   NewSynchronizeRecordClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		GroupChatMessage.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.GroupChatMessage.Use(hooks...)
	c.PersonalChatMessage.Use(hooks...)
	c.SynchronizeRecord.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.GroupChatMessage.Intercept(interceptors...)
	c.PersonalChatMessage.Intercept(interceptors...)
	c.SynchronizeRecord.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *GroupChatMessageMutation:
		return c.GroupChatMessage.mutate(ctx, m)
	case *PersonalChatMessageMutation:
		return c.PersonalChatMessage.mutate(ctx, m)
	case *SynchronizeRecordMutation:
		return c.SynchronizeRecord.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// GroupChatMessageClient is a client for the GroupChatMessage schema.
type GroupChatMessageClient struct {
	config
}

// NewGroupChatMessageClient returns a client for the GroupChatMessage from the given config.
func NewGroupChatMessageClient(c config) *GroupChatMessageClient {
	return &GroupChatMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupchatmessage.Hooks(f(g(h())))`.
func (c *GroupChatMessageClient) Use(hooks ...Hook) {
	c.hooks.GroupChatMessage = append(c.hooks.GroupChatMessage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `groupchatmessage.Intercept(f(g(h())))`.
func (c *GroupChatMessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.GroupChatMessage = append(c.inters.GroupChatMessage, interceptors...)
}

// Create returns a builder for creating a GroupChatMessage entity.
func (c *GroupChatMessageClient) Create() *GroupChatMessageCreate {
	mutation := newGroupChatMessageMutation(c.config, OpCreate)
	return &GroupChatMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupChatMessage entities.
func (c *GroupChatMessageClient) CreateBulk(builders ...*GroupChatMessageCreate) *GroupChatMessageCreateBulk {
	return &GroupChatMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupChatMessage.
func (c *GroupChatMessageClient) Update() *GroupChatMessageUpdate {
	mutation := newGroupChatMessageMutation(c.config, OpUpdate)
	return &GroupChatMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupChatMessageClient) UpdateOne(gcm *GroupChatMessage) *GroupChatMessageUpdateOne {
	mutation := newGroupChatMessageMutation(c.config, OpUpdateOne, withGroupChatMessage(gcm))
	return &GroupChatMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupChatMessageClient) UpdateOneID(id int) *GroupChatMessageUpdateOne {
	mutation := newGroupChatMessageMutation(c.config, OpUpdateOne, withGroupChatMessageID(id))
	return &GroupChatMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupChatMessage.
func (c *GroupChatMessageClient) Delete() *GroupChatMessageDelete {
	mutation := newGroupChatMessageMutation(c.config, OpDelete)
	return &GroupChatMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupChatMessageClient) DeleteOne(gcm *GroupChatMessage) *GroupChatMessageDeleteOne {
	return c.DeleteOneID(gcm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupChatMessageClient) DeleteOneID(id int) *GroupChatMessageDeleteOne {
	builder := c.Delete().Where(groupchatmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupChatMessageDeleteOne{builder}
}

// Query returns a query builder for GroupChatMessage.
func (c *GroupChatMessageClient) Query() *GroupChatMessageQuery {
	return &GroupChatMessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroupChatMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a GroupChatMessage entity by its id.
func (c *GroupChatMessageClient) Get(ctx context.Context, id int) (*GroupChatMessage, error) {
	return c.Query().Where(groupchatmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupChatMessageClient) GetX(ctx context.Context, id int) *GroupChatMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GroupChatMessageClient) Hooks() []Hook {
	hooks := c.hooks.GroupChatMessage
	return append(hooks[:len(hooks):len(hooks)], groupchatmessage.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *GroupChatMessageClient) Interceptors() []Interceptor {
	inters := c.inters.GroupChatMessage
	return append(inters[:len(inters):len(inters)], groupchatmessage.Interceptors[:]...)
}

func (c *GroupChatMessageClient) mutate(ctx context.Context, m *GroupChatMessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupChatMessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupChatMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupChatMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupChatMessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GroupChatMessage mutation op: %q", m.Op())
	}
}

// PersonalChatMessageClient is a client for the PersonalChatMessage schema.
type PersonalChatMessageClient struct {
	config
}

// NewPersonalChatMessageClient returns a client for the PersonalChatMessage from the given config.
func NewPersonalChatMessageClient(c config) *PersonalChatMessageClient {
	return &PersonalChatMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personalchatmessage.Hooks(f(g(h())))`.
func (c *PersonalChatMessageClient) Use(hooks ...Hook) {
	c.hooks.PersonalChatMessage = append(c.hooks.PersonalChatMessage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `personalchatmessage.Intercept(f(g(h())))`.
func (c *PersonalChatMessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.PersonalChatMessage = append(c.inters.PersonalChatMessage, interceptors...)
}

// Create returns a builder for creating a PersonalChatMessage entity.
func (c *PersonalChatMessageClient) Create() *PersonalChatMessageCreate {
	mutation := newPersonalChatMessageMutation(c.config, OpCreate)
	return &PersonalChatMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PersonalChatMessage entities.
func (c *PersonalChatMessageClient) CreateBulk(builders ...*PersonalChatMessageCreate) *PersonalChatMessageCreateBulk {
	return &PersonalChatMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PersonalChatMessage.
func (c *PersonalChatMessageClient) Update() *PersonalChatMessageUpdate {
	mutation := newPersonalChatMessageMutation(c.config, OpUpdate)
	return &PersonalChatMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonalChatMessageClient) UpdateOne(pcm *PersonalChatMessage) *PersonalChatMessageUpdateOne {
	mutation := newPersonalChatMessageMutation(c.config, OpUpdateOne, withPersonalChatMessage(pcm))
	return &PersonalChatMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonalChatMessageClient) UpdateOneID(id int) *PersonalChatMessageUpdateOne {
	mutation := newPersonalChatMessageMutation(c.config, OpUpdateOne, withPersonalChatMessageID(id))
	return &PersonalChatMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PersonalChatMessage.
func (c *PersonalChatMessageClient) Delete() *PersonalChatMessageDelete {
	mutation := newPersonalChatMessageMutation(c.config, OpDelete)
	return &PersonalChatMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PersonalChatMessageClient) DeleteOne(pcm *PersonalChatMessage) *PersonalChatMessageDeleteOne {
	return c.DeleteOneID(pcm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PersonalChatMessageClient) DeleteOneID(id int) *PersonalChatMessageDeleteOne {
	builder := c.Delete().Where(personalchatmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonalChatMessageDeleteOne{builder}
}

// Query returns a query builder for PersonalChatMessage.
func (c *PersonalChatMessageClient) Query() *PersonalChatMessageQuery {
	return &PersonalChatMessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePersonalChatMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a PersonalChatMessage entity by its id.
func (c *PersonalChatMessageClient) Get(ctx context.Context, id int) (*PersonalChatMessage, error) {
	return c.Query().Where(personalchatmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonalChatMessageClient) GetX(ctx context.Context, id int) *PersonalChatMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PersonalChatMessageClient) Hooks() []Hook {
	hooks := c.hooks.PersonalChatMessage
	return append(hooks[:len(hooks):len(hooks)], personalchatmessage.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PersonalChatMessageClient) Interceptors() []Interceptor {
	inters := c.inters.PersonalChatMessage
	return append(inters[:len(inters):len(inters)], personalchatmessage.Interceptors[:]...)
}

func (c *PersonalChatMessageClient) mutate(ctx context.Context, m *PersonalChatMessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PersonalChatMessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PersonalChatMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PersonalChatMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PersonalChatMessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PersonalChatMessage mutation op: %q", m.Op())
	}
}

// SynchronizeRecordClient is a client for the SynchronizeRecord schema.
type SynchronizeRecordClient struct {
	config
}

// NewSynchronizeRecordClient returns a client for the SynchronizeRecord from the given config.
func NewSynchronizeRecordClient(c config) *SynchronizeRecordClient {
	return &SynchronizeRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `synchronizerecord.Hooks(f(g(h())))`.
func (c *SynchronizeRecordClient) Use(hooks ...Hook) {
	c.hooks.SynchronizeRecord = append(c.hooks.SynchronizeRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `synchronizerecord.Intercept(f(g(h())))`.
func (c *SynchronizeRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.SynchronizeRecord = append(c.inters.SynchronizeRecord, interceptors...)
}

// Create returns a builder for creating a SynchronizeRecord entity.
func (c *SynchronizeRecordClient) Create() *SynchronizeRecordCreate {
	mutation := newSynchronizeRecordMutation(c.config, OpCreate)
	return &SynchronizeRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SynchronizeRecord entities.
func (c *SynchronizeRecordClient) CreateBulk(builders ...*SynchronizeRecordCreate) *SynchronizeRecordCreateBulk {
	return &SynchronizeRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SynchronizeRecord.
func (c *SynchronizeRecordClient) Update() *SynchronizeRecordUpdate {
	mutation := newSynchronizeRecordMutation(c.config, OpUpdate)
	return &SynchronizeRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SynchronizeRecordClient) UpdateOne(sr *SynchronizeRecord) *SynchronizeRecordUpdateOne {
	mutation := newSynchronizeRecordMutation(c.config, OpUpdateOne, withSynchronizeRecord(sr))
	return &SynchronizeRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SynchronizeRecordClient) UpdateOneID(id int) *SynchronizeRecordUpdateOne {
	mutation := newSynchronizeRecordMutation(c.config, OpUpdateOne, withSynchronizeRecordID(id))
	return &SynchronizeRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SynchronizeRecord.
func (c *SynchronizeRecordClient) Delete() *SynchronizeRecordDelete {
	mutation := newSynchronizeRecordMutation(c.config, OpDelete)
	return &SynchronizeRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SynchronizeRecordClient) DeleteOne(sr *SynchronizeRecord) *SynchronizeRecordDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SynchronizeRecordClient) DeleteOneID(id int) *SynchronizeRecordDeleteOne {
	builder := c.Delete().Where(synchronizerecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SynchronizeRecordDeleteOne{builder}
}

// Query returns a query builder for SynchronizeRecord.
func (c *SynchronizeRecordClient) Query() *SynchronizeRecordQuery {
	return &SynchronizeRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSynchronizeRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a SynchronizeRecord entity by its id.
func (c *SynchronizeRecordClient) Get(ctx context.Context, id int) (*SynchronizeRecord, error) {
	return c.Query().Where(synchronizerecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SynchronizeRecordClient) GetX(ctx context.Context, id int) *SynchronizeRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SynchronizeRecordClient) Hooks() []Hook {
	return c.hooks.SynchronizeRecord
}

// Interceptors returns the client interceptors.
func (c *SynchronizeRecordClient) Interceptors() []Interceptor {
	return c.inters.SynchronizeRecord
}

func (c *SynchronizeRecordClient) mutate(ctx context.Context, m *SynchronizeRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SynchronizeRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SynchronizeRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SynchronizeRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SynchronizeRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SynchronizeRecord mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		GroupChatMessage, PersonalChatMessage, SynchronizeRecord []ent.Hook
	}
	inters struct {
		GroupChatMessage, PersonalChatMessage, SynchronizeRecord []ent.Interceptor
	}
)
