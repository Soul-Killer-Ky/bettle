// Code generated by ent, DO NOT EDIT.

package ent

import (
	"beetle/app/im/internal/data/ent/personalchatmessage"
	"beetle/app/im/internal/data/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PersonalChatMessageUpdate is the builder for updating PersonalChatMessage entities.
type PersonalChatMessageUpdate struct {
	config
	hooks    []Hook
	mutation *PersonalChatMessageMutation
}

// Where appends a list predicates to the PersonalChatMessageUpdate builder.
func (pcmu *PersonalChatMessageUpdate) Where(ps ...predicate.PersonalChatMessage) *PersonalChatMessageUpdate {
	pcmu.mutation.Where(ps...)
	return pcmu
}

// SetDeletedAt sets the "deleted_at" field.
func (pcmu *PersonalChatMessageUpdate) SetDeletedAt(t time.Time) *PersonalChatMessageUpdate {
	pcmu.mutation.SetDeletedAt(t)
	return pcmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pcmu *PersonalChatMessageUpdate) SetNillableDeletedAt(t *time.Time) *PersonalChatMessageUpdate {
	if t != nil {
		pcmu.SetDeletedAt(*t)
	}
	return pcmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pcmu *PersonalChatMessageUpdate) ClearDeletedAt() *PersonalChatMessageUpdate {
	pcmu.mutation.ClearDeletedAt()
	return pcmu
}

// SetFrom sets the "from" field.
func (pcmu *PersonalChatMessageUpdate) SetFrom(i int) *PersonalChatMessageUpdate {
	pcmu.mutation.ResetFrom()
	pcmu.mutation.SetFrom(i)
	return pcmu
}

// AddFrom adds i to the "from" field.
func (pcmu *PersonalChatMessageUpdate) AddFrom(i int) *PersonalChatMessageUpdate {
	pcmu.mutation.AddFrom(i)
	return pcmu
}

// SetSender sets the "sender" field.
func (pcmu *PersonalChatMessageUpdate) SetSender(i int) *PersonalChatMessageUpdate {
	pcmu.mutation.ResetSender()
	pcmu.mutation.SetSender(i)
	return pcmu
}

// AddSender adds i to the "sender" field.
func (pcmu *PersonalChatMessageUpdate) AddSender(i int) *PersonalChatMessageUpdate {
	pcmu.mutation.AddSender(i)
	return pcmu
}

// SetMessage sets the "message" field.
func (pcmu *PersonalChatMessageUpdate) SetMessage(s string) *PersonalChatMessageUpdate {
	pcmu.mutation.SetMessage(s)
	return pcmu
}

// Mutation returns the PersonalChatMessageMutation object of the builder.
func (pcmu *PersonalChatMessageUpdate) Mutation() *PersonalChatMessageMutation {
	return pcmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcmu *PersonalChatMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pcmu.sqlSave, pcmu.mutation, pcmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcmu *PersonalChatMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := pcmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcmu *PersonalChatMessageUpdate) Exec(ctx context.Context) error {
	_, err := pcmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcmu *PersonalChatMessageUpdate) ExecX(ctx context.Context) {
	if err := pcmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pcmu *PersonalChatMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(personalchatmessage.Table, personalchatmessage.Columns, sqlgraph.NewFieldSpec(personalchatmessage.FieldID, field.TypeInt))
	if ps := pcmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcmu.mutation.DeletedAt(); ok {
		_spec.SetField(personalchatmessage.FieldDeletedAt, field.TypeTime, value)
	}
	if pcmu.mutation.DeletedAtCleared() {
		_spec.ClearField(personalchatmessage.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pcmu.mutation.From(); ok {
		_spec.SetField(personalchatmessage.FieldFrom, field.TypeInt, value)
	}
	if value, ok := pcmu.mutation.AddedFrom(); ok {
		_spec.AddField(personalchatmessage.FieldFrom, field.TypeInt, value)
	}
	if value, ok := pcmu.mutation.Sender(); ok {
		_spec.SetField(personalchatmessage.FieldSender, field.TypeInt, value)
	}
	if value, ok := pcmu.mutation.AddedSender(); ok {
		_spec.AddField(personalchatmessage.FieldSender, field.TypeInt, value)
	}
	if value, ok := pcmu.mutation.Message(); ok {
		_spec.SetField(personalchatmessage.FieldMessage, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalchatmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcmu.mutation.done = true
	return n, nil
}

// PersonalChatMessageUpdateOne is the builder for updating a single PersonalChatMessage entity.
type PersonalChatMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonalChatMessageMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (pcmuo *PersonalChatMessageUpdateOne) SetDeletedAt(t time.Time) *PersonalChatMessageUpdateOne {
	pcmuo.mutation.SetDeletedAt(t)
	return pcmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pcmuo *PersonalChatMessageUpdateOne) SetNillableDeletedAt(t *time.Time) *PersonalChatMessageUpdateOne {
	if t != nil {
		pcmuo.SetDeletedAt(*t)
	}
	return pcmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pcmuo *PersonalChatMessageUpdateOne) ClearDeletedAt() *PersonalChatMessageUpdateOne {
	pcmuo.mutation.ClearDeletedAt()
	return pcmuo
}

// SetFrom sets the "from" field.
func (pcmuo *PersonalChatMessageUpdateOne) SetFrom(i int) *PersonalChatMessageUpdateOne {
	pcmuo.mutation.ResetFrom()
	pcmuo.mutation.SetFrom(i)
	return pcmuo
}

// AddFrom adds i to the "from" field.
func (pcmuo *PersonalChatMessageUpdateOne) AddFrom(i int) *PersonalChatMessageUpdateOne {
	pcmuo.mutation.AddFrom(i)
	return pcmuo
}

// SetSender sets the "sender" field.
func (pcmuo *PersonalChatMessageUpdateOne) SetSender(i int) *PersonalChatMessageUpdateOne {
	pcmuo.mutation.ResetSender()
	pcmuo.mutation.SetSender(i)
	return pcmuo
}

// AddSender adds i to the "sender" field.
func (pcmuo *PersonalChatMessageUpdateOne) AddSender(i int) *PersonalChatMessageUpdateOne {
	pcmuo.mutation.AddSender(i)
	return pcmuo
}

// SetMessage sets the "message" field.
func (pcmuo *PersonalChatMessageUpdateOne) SetMessage(s string) *PersonalChatMessageUpdateOne {
	pcmuo.mutation.SetMessage(s)
	return pcmuo
}

// Mutation returns the PersonalChatMessageMutation object of the builder.
func (pcmuo *PersonalChatMessageUpdateOne) Mutation() *PersonalChatMessageMutation {
	return pcmuo.mutation
}

// Where appends a list predicates to the PersonalChatMessageUpdate builder.
func (pcmuo *PersonalChatMessageUpdateOne) Where(ps ...predicate.PersonalChatMessage) *PersonalChatMessageUpdateOne {
	pcmuo.mutation.Where(ps...)
	return pcmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcmuo *PersonalChatMessageUpdateOne) Select(field string, fields ...string) *PersonalChatMessageUpdateOne {
	pcmuo.fields = append([]string{field}, fields...)
	return pcmuo
}

// Save executes the query and returns the updated PersonalChatMessage entity.
func (pcmuo *PersonalChatMessageUpdateOne) Save(ctx context.Context) (*PersonalChatMessage, error) {
	return withHooks(ctx, pcmuo.sqlSave, pcmuo.mutation, pcmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcmuo *PersonalChatMessageUpdateOne) SaveX(ctx context.Context) *PersonalChatMessage {
	node, err := pcmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcmuo *PersonalChatMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := pcmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcmuo *PersonalChatMessageUpdateOne) ExecX(ctx context.Context) {
	if err := pcmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pcmuo *PersonalChatMessageUpdateOne) sqlSave(ctx context.Context) (_node *PersonalChatMessage, err error) {
	_spec := sqlgraph.NewUpdateSpec(personalchatmessage.Table, personalchatmessage.Columns, sqlgraph.NewFieldSpec(personalchatmessage.FieldID, field.TypeInt))
	id, ok := pcmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PersonalChatMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personalchatmessage.FieldID)
		for _, f := range fields {
			if !personalchatmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != personalchatmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcmuo.mutation.DeletedAt(); ok {
		_spec.SetField(personalchatmessage.FieldDeletedAt, field.TypeTime, value)
	}
	if pcmuo.mutation.DeletedAtCleared() {
		_spec.ClearField(personalchatmessage.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pcmuo.mutation.From(); ok {
		_spec.SetField(personalchatmessage.FieldFrom, field.TypeInt, value)
	}
	if value, ok := pcmuo.mutation.AddedFrom(); ok {
		_spec.AddField(personalchatmessage.FieldFrom, field.TypeInt, value)
	}
	if value, ok := pcmuo.mutation.Sender(); ok {
		_spec.SetField(personalchatmessage.FieldSender, field.TypeInt, value)
	}
	if value, ok := pcmuo.mutation.AddedSender(); ok {
		_spec.AddField(personalchatmessage.FieldSender, field.TypeInt, value)
	}
	if value, ok := pcmuo.mutation.Message(); ok {
		_spec.SetField(personalchatmessage.FieldMessage, field.TypeString, value)
	}
	_node = &PersonalChatMessage{config: pcmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalchatmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcmuo.mutation.done = true
	return _node, nil
}
