// Code generated by ent, DO NOT EDIT.

package ent

import (
	"beetle/app/im/internal/data/ent/personalchatmessage"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PersonalChatMessage is the model entity for the PersonalChatMessage schema.
type PersonalChatMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 发送者
	From int `json:"from,omitempty"`
	// 接收者
	Sender int `json:"sender,omitempty"`
	// 消息内容
	Message      string `json:"message,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PersonalChatMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case personalchatmessage.FieldID, personalchatmessage.FieldFrom, personalchatmessage.FieldSender:
			values[i] = new(sql.NullInt64)
		case personalchatmessage.FieldMessage:
			values[i] = new(sql.NullString)
		case personalchatmessage.FieldCreatedAt, personalchatmessage.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PersonalChatMessage fields.
func (pcm *PersonalChatMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case personalchatmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pcm.ID = int(value.Int64)
		case personalchatmessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pcm.CreatedAt = value.Time
			}
		case personalchatmessage.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pcm.DeletedAt = new(time.Time)
				*pcm.DeletedAt = value.Time
			}
		case personalchatmessage.FieldFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				pcm.From = int(value.Int64)
			}
		case personalchatmessage.FieldSender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sender", values[i])
			} else if value.Valid {
				pcm.Sender = int(value.Int64)
			}
		case personalchatmessage.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				pcm.Message = value.String
			}
		default:
			pcm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PersonalChatMessage.
// This includes values selected through modifiers, order, etc.
func (pcm *PersonalChatMessage) Value(name string) (ent.Value, error) {
	return pcm.selectValues.Get(name)
}

// Update returns a builder for updating this PersonalChatMessage.
// Note that you need to call PersonalChatMessage.Unwrap() before calling this method if this PersonalChatMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (pcm *PersonalChatMessage) Update() *PersonalChatMessageUpdateOne {
	return NewPersonalChatMessageClient(pcm.config).UpdateOne(pcm)
}

// Unwrap unwraps the PersonalChatMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pcm *PersonalChatMessage) Unwrap() *PersonalChatMessage {
	_tx, ok := pcm.config.driver.(*txDriver)
	if !ok {
		panic("ent: PersonalChatMessage is not a transactional entity")
	}
	pcm.config.driver = _tx.drv
	return pcm
}

// String implements the fmt.Stringer.
func (pcm *PersonalChatMessage) String() string {
	var builder strings.Builder
	builder.WriteString("PersonalChatMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pcm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pcm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pcm.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("from=")
	builder.WriteString(fmt.Sprintf("%v", pcm.From))
	builder.WriteString(", ")
	builder.WriteString("sender=")
	builder.WriteString(fmt.Sprintf("%v", pcm.Sender))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(pcm.Message)
	builder.WriteByte(')')
	return builder.String()
}

// PersonalChatMessages is a parsable slice of PersonalChatMessage.
type PersonalChatMessages []*PersonalChatMessage
