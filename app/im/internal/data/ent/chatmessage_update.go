// Code generated by ent, DO NOT EDIT.

package ent

import (
	"beetle/app/im/internal/data/ent/chatmessage"
	"beetle/app/im/internal/data/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChatMessageUpdate is the builder for updating ChatMessage entities.
type ChatMessageUpdate struct {
	config
	hooks    []Hook
	mutation *ChatMessageMutation
}

// Where appends a list predicates to the ChatMessageUpdate builder.
func (cmu *ChatMessageUpdate) Where(ps ...predicate.ChatMessage) *ChatMessageUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetDeletedAt sets the "deleted_at" field.
func (cmu *ChatMessageUpdate) SetDeletedAt(t time.Time) *ChatMessageUpdate {
	cmu.mutation.SetDeletedAt(t)
	return cmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cmu *ChatMessageUpdate) SetNillableDeletedAt(t *time.Time) *ChatMessageUpdate {
	if t != nil {
		cmu.SetDeletedAt(*t)
	}
	return cmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cmu *ChatMessageUpdate) ClearDeletedAt() *ChatMessageUpdate {
	cmu.mutation.ClearDeletedAt()
	return cmu
}

// SetFrom sets the "from" field.
func (cmu *ChatMessageUpdate) SetFrom(i int) *ChatMessageUpdate {
	cmu.mutation.ResetFrom()
	cmu.mutation.SetFrom(i)
	return cmu
}

// AddFrom adds i to the "from" field.
func (cmu *ChatMessageUpdate) AddFrom(i int) *ChatMessageUpdate {
	cmu.mutation.AddFrom(i)
	return cmu
}

// SetSender sets the "sender" field.
func (cmu *ChatMessageUpdate) SetSender(i int) *ChatMessageUpdate {
	cmu.mutation.ResetSender()
	cmu.mutation.SetSender(i)
	return cmu
}

// AddSender adds i to the "sender" field.
func (cmu *ChatMessageUpdate) AddSender(i int) *ChatMessageUpdate {
	cmu.mutation.AddSender(i)
	return cmu
}

// SetMessage sets the "message" field.
func (cmu *ChatMessageUpdate) SetMessage(s string) *ChatMessageUpdate {
	cmu.mutation.SetMessage(s)
	return cmu
}

// Mutation returns the ChatMessageMutation object of the builder.
func (cmu *ChatMessageUpdate) Mutation() *ChatMessageMutation {
	return cmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *ChatMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ChatMessageMutation](ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *ChatMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *ChatMessageUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *ChatMessageUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmu *ChatMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(chatmessage.Table, chatmessage.Columns, sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeInt))
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.DeletedAt(); ok {
		_spec.SetField(chatmessage.FieldDeletedAt, field.TypeTime, value)
	}
	if cmu.mutation.DeletedAtCleared() {
		_spec.ClearField(chatmessage.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cmu.mutation.From(); ok {
		_spec.SetField(chatmessage.FieldFrom, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.AddedFrom(); ok {
		_spec.AddField(chatmessage.FieldFrom, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.Sender(); ok {
		_spec.SetField(chatmessage.FieldSender, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.AddedSender(); ok {
		_spec.AddField(chatmessage.FieldSender, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.Message(); ok {
		_spec.SetField(chatmessage.FieldMessage, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// ChatMessageUpdateOne is the builder for updating a single ChatMessage entity.
type ChatMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatMessageMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (cmuo *ChatMessageUpdateOne) SetDeletedAt(t time.Time) *ChatMessageUpdateOne {
	cmuo.mutation.SetDeletedAt(t)
	return cmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cmuo *ChatMessageUpdateOne) SetNillableDeletedAt(t *time.Time) *ChatMessageUpdateOne {
	if t != nil {
		cmuo.SetDeletedAt(*t)
	}
	return cmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cmuo *ChatMessageUpdateOne) ClearDeletedAt() *ChatMessageUpdateOne {
	cmuo.mutation.ClearDeletedAt()
	return cmuo
}

// SetFrom sets the "from" field.
func (cmuo *ChatMessageUpdateOne) SetFrom(i int) *ChatMessageUpdateOne {
	cmuo.mutation.ResetFrom()
	cmuo.mutation.SetFrom(i)
	return cmuo
}

// AddFrom adds i to the "from" field.
func (cmuo *ChatMessageUpdateOne) AddFrom(i int) *ChatMessageUpdateOne {
	cmuo.mutation.AddFrom(i)
	return cmuo
}

// SetSender sets the "sender" field.
func (cmuo *ChatMessageUpdateOne) SetSender(i int) *ChatMessageUpdateOne {
	cmuo.mutation.ResetSender()
	cmuo.mutation.SetSender(i)
	return cmuo
}

// AddSender adds i to the "sender" field.
func (cmuo *ChatMessageUpdateOne) AddSender(i int) *ChatMessageUpdateOne {
	cmuo.mutation.AddSender(i)
	return cmuo
}

// SetMessage sets the "message" field.
func (cmuo *ChatMessageUpdateOne) SetMessage(s string) *ChatMessageUpdateOne {
	cmuo.mutation.SetMessage(s)
	return cmuo
}

// Mutation returns the ChatMessageMutation object of the builder.
func (cmuo *ChatMessageUpdateOne) Mutation() *ChatMessageMutation {
	return cmuo.mutation
}

// Where appends a list predicates to the ChatMessageUpdate builder.
func (cmuo *ChatMessageUpdateOne) Where(ps ...predicate.ChatMessage) *ChatMessageUpdateOne {
	cmuo.mutation.Where(ps...)
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *ChatMessageUpdateOne) Select(field string, fields ...string) *ChatMessageUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated ChatMessage entity.
func (cmuo *ChatMessageUpdateOne) Save(ctx context.Context) (*ChatMessage, error) {
	return withHooks[*ChatMessage, ChatMessageMutation](ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *ChatMessageUpdateOne) SaveX(ctx context.Context) *ChatMessage {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *ChatMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *ChatMessageUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmuo *ChatMessageUpdateOne) sqlSave(ctx context.Context) (_node *ChatMessage, err error) {
	_spec := sqlgraph.NewUpdateSpec(chatmessage.Table, chatmessage.Columns, sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeInt))
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatmessage.FieldID)
		for _, f := range fields {
			if !chatmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.DeletedAt(); ok {
		_spec.SetField(chatmessage.FieldDeletedAt, field.TypeTime, value)
	}
	if cmuo.mutation.DeletedAtCleared() {
		_spec.ClearField(chatmessage.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cmuo.mutation.From(); ok {
		_spec.SetField(chatmessage.FieldFrom, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.AddedFrom(); ok {
		_spec.AddField(chatmessage.FieldFrom, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.Sender(); ok {
		_spec.SetField(chatmessage.FieldSender, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.AddedSender(); ok {
		_spec.AddField(chatmessage.FieldSender, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.Message(); ok {
		_spec.SetField(chatmessage.FieldMessage, field.TypeString, value)
	}
	_node = &ChatMessage{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}
