// Code generated by ent, DO NOT EDIT.

package ent

import (
	"beetle/app/im/internal/data/ent/loadrecord"
	"beetle/app/im/internal/data/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// LoadRecordUpdate is the builder for updating LoadRecord entities.
type LoadRecordUpdate struct {
	config
	hooks    []Hook
	mutation *LoadRecordMutation
}

// Where appends a list predicates to the LoadRecordUpdate builder.
func (lru *LoadRecordUpdate) Where(ps ...predicate.LoadRecord) *LoadRecordUpdate {
	lru.mutation.Where(ps...)
	return lru
}

// SetUserID sets the "user_id" field.
func (lru *LoadRecordUpdate) SetUserID(i int) *LoadRecordUpdate {
	lru.mutation.ResetUserID()
	lru.mutation.SetUserID(i)
	return lru
}

// AddUserID adds i to the "user_id" field.
func (lru *LoadRecordUpdate) AddUserID(i int) *LoadRecordUpdate {
	lru.mutation.AddUserID(i)
	return lru
}

// SetDeviceID sets the "device_id" field.
func (lru *LoadRecordUpdate) SetDeviceID(u uuid.UUID) *LoadRecordUpdate {
	lru.mutation.SetDeviceID(u)
	return lru
}

// Mutation returns the LoadRecordMutation object of the builder.
func (lru *LoadRecordUpdate) Mutation() *LoadRecordMutation {
	return lru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lru *LoadRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lru.sqlSave, lru.mutation, lru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lru *LoadRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := lru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lru *LoadRecordUpdate) Exec(ctx context.Context) error {
	_, err := lru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lru *LoadRecordUpdate) ExecX(ctx context.Context) {
	if err := lru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lru *LoadRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(loadrecord.Table, loadrecord.Columns, sqlgraph.NewFieldSpec(loadrecord.FieldID, field.TypeInt))
	if ps := lru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lru.mutation.UserID(); ok {
		_spec.SetField(loadrecord.FieldUserID, field.TypeInt, value)
	}
	if value, ok := lru.mutation.AddedUserID(); ok {
		_spec.AddField(loadrecord.FieldUserID, field.TypeInt, value)
	}
	if value, ok := lru.mutation.DeviceID(); ok {
		_spec.SetField(loadrecord.FieldDeviceID, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loadrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lru.mutation.done = true
	return n, nil
}

// LoadRecordUpdateOne is the builder for updating a single LoadRecord entity.
type LoadRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoadRecordMutation
}

// SetUserID sets the "user_id" field.
func (lruo *LoadRecordUpdateOne) SetUserID(i int) *LoadRecordUpdateOne {
	lruo.mutation.ResetUserID()
	lruo.mutation.SetUserID(i)
	return lruo
}

// AddUserID adds i to the "user_id" field.
func (lruo *LoadRecordUpdateOne) AddUserID(i int) *LoadRecordUpdateOne {
	lruo.mutation.AddUserID(i)
	return lruo
}

// SetDeviceID sets the "device_id" field.
func (lruo *LoadRecordUpdateOne) SetDeviceID(u uuid.UUID) *LoadRecordUpdateOne {
	lruo.mutation.SetDeviceID(u)
	return lruo
}

// Mutation returns the LoadRecordMutation object of the builder.
func (lruo *LoadRecordUpdateOne) Mutation() *LoadRecordMutation {
	return lruo.mutation
}

// Where appends a list predicates to the LoadRecordUpdate builder.
func (lruo *LoadRecordUpdateOne) Where(ps ...predicate.LoadRecord) *LoadRecordUpdateOne {
	lruo.mutation.Where(ps...)
	return lruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lruo *LoadRecordUpdateOne) Select(field string, fields ...string) *LoadRecordUpdateOne {
	lruo.fields = append([]string{field}, fields...)
	return lruo
}

// Save executes the query and returns the updated LoadRecord entity.
func (lruo *LoadRecordUpdateOne) Save(ctx context.Context) (*LoadRecord, error) {
	return withHooks(ctx, lruo.sqlSave, lruo.mutation, lruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lruo *LoadRecordUpdateOne) SaveX(ctx context.Context) *LoadRecord {
	node, err := lruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lruo *LoadRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := lruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lruo *LoadRecordUpdateOne) ExecX(ctx context.Context) {
	if err := lruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lruo *LoadRecordUpdateOne) sqlSave(ctx context.Context) (_node *LoadRecord, err error) {
	_spec := sqlgraph.NewUpdateSpec(loadrecord.Table, loadrecord.Columns, sqlgraph.NewFieldSpec(loadrecord.FieldID, field.TypeInt))
	id, ok := lruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoadRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loadrecord.FieldID)
		for _, f := range fields {
			if !loadrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loadrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lruo.mutation.UserID(); ok {
		_spec.SetField(loadrecord.FieldUserID, field.TypeInt, value)
	}
	if value, ok := lruo.mutation.AddedUserID(); ok {
		_spec.AddField(loadrecord.FieldUserID, field.TypeInt, value)
	}
	if value, ok := lruo.mutation.DeviceID(); ok {
		_spec.SetField(loadrecord.FieldDeviceID, field.TypeUUID, value)
	}
	_node = &LoadRecord{config: lruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loadrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lruo.mutation.done = true
	return _node, nil
}
