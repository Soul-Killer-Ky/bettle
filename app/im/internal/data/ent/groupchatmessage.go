// Code generated by ent, DO NOT EDIT.

package ent

import (
	"beetle/app/im/internal/data/ent/groupchatmessage"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GroupChatMessage is the model entity for the GroupChatMessage schema.
type GroupChatMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 消息ID
	MessageID int64 `json:"message_id,omitempty"`
	// 发送者
	From int `json:"from,omitempty"`
	// 群ID
	GroupID int `json:"group_id,omitempty"`
	// 消息内容
	Message      string `json:"message,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupChatMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case groupchatmessage.FieldID, groupchatmessage.FieldMessageID, groupchatmessage.FieldFrom, groupchatmessage.FieldGroupID:
			values[i] = new(sql.NullInt64)
		case groupchatmessage.FieldMessage:
			values[i] = new(sql.NullString)
		case groupchatmessage.FieldCreatedAt, groupchatmessage.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupChatMessage fields.
func (gcm *GroupChatMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groupchatmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gcm.ID = int(value.Int64)
		case groupchatmessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gcm.CreatedAt = value.Time
			}
		case groupchatmessage.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gcm.DeletedAt = new(time.Time)
				*gcm.DeletedAt = value.Time
			}
		case groupchatmessage.FieldMessageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field message_id", values[i])
			} else if value.Valid {
				gcm.MessageID = value.Int64
			}
		case groupchatmessage.FieldFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				gcm.From = int(value.Int64)
			}
		case groupchatmessage.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				gcm.GroupID = int(value.Int64)
			}
		case groupchatmessage.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				gcm.Message = value.String
			}
		default:
			gcm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GroupChatMessage.
// This includes values selected through modifiers, order, etc.
func (gcm *GroupChatMessage) Value(name string) (ent.Value, error) {
	return gcm.selectValues.Get(name)
}

// Update returns a builder for updating this GroupChatMessage.
// Note that you need to call GroupChatMessage.Unwrap() before calling this method if this GroupChatMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (gcm *GroupChatMessage) Update() *GroupChatMessageUpdateOne {
	return NewGroupChatMessageClient(gcm.config).UpdateOne(gcm)
}

// Unwrap unwraps the GroupChatMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gcm *GroupChatMessage) Unwrap() *GroupChatMessage {
	_tx, ok := gcm.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroupChatMessage is not a transactional entity")
	}
	gcm.config.driver = _tx.drv
	return gcm
}

// String implements the fmt.Stringer.
func (gcm *GroupChatMessage) String() string {
	var builder strings.Builder
	builder.WriteString("GroupChatMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gcm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(gcm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := gcm.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("message_id=")
	builder.WriteString(fmt.Sprintf("%v", gcm.MessageID))
	builder.WriteString(", ")
	builder.WriteString("from=")
	builder.WriteString(fmt.Sprintf("%v", gcm.From))
	builder.WriteString(", ")
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", gcm.GroupID))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(gcm.Message)
	builder.WriteByte(')')
	return builder.String()
}

// GroupChatMessages is a parsable slice of GroupChatMessage.
type GroupChatMessages []*GroupChatMessage
