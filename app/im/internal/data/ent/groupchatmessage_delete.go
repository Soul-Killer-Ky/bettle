// Code generated by ent, DO NOT EDIT.

package ent

import (
	"beetle/app/im/internal/data/ent/groupchatmessage"
	"beetle/app/im/internal/data/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupChatMessageDelete is the builder for deleting a GroupChatMessage entity.
type GroupChatMessageDelete struct {
	config
	hooks    []Hook
	mutation *GroupChatMessageMutation
}

// Where appends a list predicates to the GroupChatMessageDelete builder.
func (gcmd *GroupChatMessageDelete) Where(ps ...predicate.GroupChatMessage) *GroupChatMessageDelete {
	gcmd.mutation.Where(ps...)
	return gcmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gcmd *GroupChatMessageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gcmd.sqlExec, gcmd.mutation, gcmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gcmd *GroupChatMessageDelete) ExecX(ctx context.Context) int {
	n, err := gcmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gcmd *GroupChatMessageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(groupchatmessage.Table, sqlgraph.NewFieldSpec(groupchatmessage.FieldID, field.TypeInt))
	if ps := gcmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gcmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gcmd.mutation.done = true
	return affected, err
}

// GroupChatMessageDeleteOne is the builder for deleting a single GroupChatMessage entity.
type GroupChatMessageDeleteOne struct {
	gcmd *GroupChatMessageDelete
}

// Where appends a list predicates to the GroupChatMessageDelete builder.
func (gcmdo *GroupChatMessageDeleteOne) Where(ps ...predicate.GroupChatMessage) *GroupChatMessageDeleteOne {
	gcmdo.gcmd.mutation.Where(ps...)
	return gcmdo
}

// Exec executes the deletion query.
func (gcmdo *GroupChatMessageDeleteOne) Exec(ctx context.Context) error {
	n, err := gcmdo.gcmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{groupchatmessage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gcmdo *GroupChatMessageDeleteOne) ExecX(ctx context.Context) {
	if err := gcmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
