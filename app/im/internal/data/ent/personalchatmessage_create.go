// Code generated by ent, DO NOT EDIT.

package ent

import (
	"beetle/app/im/internal/data/ent/personalchatmessage"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PersonalChatMessageCreate is the builder for creating a PersonalChatMessage entity.
type PersonalChatMessageCreate struct {
	config
	mutation *PersonalChatMessageMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pcmc *PersonalChatMessageCreate) SetCreatedAt(t time.Time) *PersonalChatMessageCreate {
	pcmc.mutation.SetCreatedAt(t)
	return pcmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcmc *PersonalChatMessageCreate) SetNillableCreatedAt(t *time.Time) *PersonalChatMessageCreate {
	if t != nil {
		pcmc.SetCreatedAt(*t)
	}
	return pcmc
}

// SetDeletedAt sets the "deleted_at" field.
func (pcmc *PersonalChatMessageCreate) SetDeletedAt(t time.Time) *PersonalChatMessageCreate {
	pcmc.mutation.SetDeletedAt(t)
	return pcmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pcmc *PersonalChatMessageCreate) SetNillableDeletedAt(t *time.Time) *PersonalChatMessageCreate {
	if t != nil {
		pcmc.SetDeletedAt(*t)
	}
	return pcmc
}

// SetFrom sets the "from" field.
func (pcmc *PersonalChatMessageCreate) SetFrom(i int) *PersonalChatMessageCreate {
	pcmc.mutation.SetFrom(i)
	return pcmc
}

// SetSender sets the "sender" field.
func (pcmc *PersonalChatMessageCreate) SetSender(i int) *PersonalChatMessageCreate {
	pcmc.mutation.SetSender(i)
	return pcmc
}

// SetMessage sets the "message" field.
func (pcmc *PersonalChatMessageCreate) SetMessage(s string) *PersonalChatMessageCreate {
	pcmc.mutation.SetMessage(s)
	return pcmc
}

// Mutation returns the PersonalChatMessageMutation object of the builder.
func (pcmc *PersonalChatMessageCreate) Mutation() *PersonalChatMessageMutation {
	return pcmc.mutation
}

// Save creates the PersonalChatMessage in the database.
func (pcmc *PersonalChatMessageCreate) Save(ctx context.Context) (*PersonalChatMessage, error) {
	if err := pcmc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pcmc.sqlSave, pcmc.mutation, pcmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcmc *PersonalChatMessageCreate) SaveX(ctx context.Context) *PersonalChatMessage {
	v, err := pcmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcmc *PersonalChatMessageCreate) Exec(ctx context.Context) error {
	_, err := pcmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcmc *PersonalChatMessageCreate) ExecX(ctx context.Context) {
	if err := pcmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcmc *PersonalChatMessageCreate) defaults() error {
	if _, ok := pcmc.mutation.CreatedAt(); !ok {
		if personalchatmessage.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized personalchatmessage.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := personalchatmessage.DefaultCreatedAt()
		pcmc.mutation.SetCreatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pcmc *PersonalChatMessageCreate) check() error {
	if _, ok := pcmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PersonalChatMessage.created_at"`)}
	}
	if _, ok := pcmc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "PersonalChatMessage.from"`)}
	}
	if _, ok := pcmc.mutation.Sender(); !ok {
		return &ValidationError{Name: "sender", err: errors.New(`ent: missing required field "PersonalChatMessage.sender"`)}
	}
	if _, ok := pcmc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "PersonalChatMessage.message"`)}
	}
	return nil
}

func (pcmc *PersonalChatMessageCreate) sqlSave(ctx context.Context) (*PersonalChatMessage, error) {
	if err := pcmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pcmc.mutation.id = &_node.ID
	pcmc.mutation.done = true
	return _node, nil
}

func (pcmc *PersonalChatMessageCreate) createSpec() (*PersonalChatMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &PersonalChatMessage{config: pcmc.config}
		_spec = sqlgraph.NewCreateSpec(personalchatmessage.Table, sqlgraph.NewFieldSpec(personalchatmessage.FieldID, field.TypeInt))
	)
	if value, ok := pcmc.mutation.CreatedAt(); ok {
		_spec.SetField(personalchatmessage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pcmc.mutation.DeletedAt(); ok {
		_spec.SetField(personalchatmessage.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pcmc.mutation.From(); ok {
		_spec.SetField(personalchatmessage.FieldFrom, field.TypeInt, value)
		_node.From = value
	}
	if value, ok := pcmc.mutation.Sender(); ok {
		_spec.SetField(personalchatmessage.FieldSender, field.TypeInt, value)
		_node.Sender = value
	}
	if value, ok := pcmc.mutation.Message(); ok {
		_spec.SetField(personalchatmessage.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	return _node, _spec
}

// PersonalChatMessageCreateBulk is the builder for creating many PersonalChatMessage entities in bulk.
type PersonalChatMessageCreateBulk struct {
	config
	builders []*PersonalChatMessageCreate
}

// Save creates the PersonalChatMessage entities in the database.
func (pcmcb *PersonalChatMessageCreateBulk) Save(ctx context.Context) ([]*PersonalChatMessage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcmcb.builders))
	nodes := make([]*PersonalChatMessage, len(pcmcb.builders))
	mutators := make([]Mutator, len(pcmcb.builders))
	for i := range pcmcb.builders {
		func(i int, root context.Context) {
			builder := pcmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonalChatMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcmcb *PersonalChatMessageCreateBulk) SaveX(ctx context.Context) []*PersonalChatMessage {
	v, err := pcmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcmcb *PersonalChatMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := pcmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcmcb *PersonalChatMessageCreateBulk) ExecX(ctx context.Context) {
	if err := pcmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
