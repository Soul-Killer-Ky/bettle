// Code generated by ent, DO NOT EDIT.

package chatmessage

import (
	"beetle/app/im/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldDeletedAt, v))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldFrom, v))
}

// Sender applies equality check predicate on the "sender" field. It's identical to SenderEQ.
func Sender(v int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldSender, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotNull(FieldDeletedAt))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldFrom, v))
}

// SenderEQ applies the EQ predicate on the "sender" field.
func SenderEQ(v int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldSender, v))
}

// SenderNEQ applies the NEQ predicate on the "sender" field.
func SenderNEQ(v int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldSender, v))
}

// SenderIn applies the In predicate on the "sender" field.
func SenderIn(vs ...int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldSender, vs...))
}

// SenderNotIn applies the NotIn predicate on the "sender" field.
func SenderNotIn(vs ...int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldSender, vs...))
}

// SenderGT applies the GT predicate on the "sender" field.
func SenderGT(v int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldSender, v))
}

// SenderGTE applies the GTE predicate on the "sender" field.
func SenderGTE(v int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldSender, v))
}

// SenderLT applies the LT predicate on the "sender" field.
func SenderLT(v int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldSender, v))
}

// SenderLTE applies the LTE predicate on the "sender" field.
func SenderLTE(v int) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldSender, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContainsFold(FieldMessage, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChatMessage) predicate.ChatMessage {
	return predicate.ChatMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChatMessage) predicate.ChatMessage {
	return predicate.ChatMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChatMessage) predicate.ChatMessage {
	return predicate.ChatMessage(func(s *sql.Selector) {
		p(s.Not())
	})
}
