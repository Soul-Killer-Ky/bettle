// Code generated by ent, DO NOT EDIT.

package ent

import (
	"beetle/app/im/internal/data/ent/predicate"
	"beetle/app/im/internal/data/ent/synchronizerecord"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SynchronizeRecordUpdate is the builder for updating SynchronizeRecord entities.
type SynchronizeRecordUpdate struct {
	config
	hooks    []Hook
	mutation *SynchronizeRecordMutation
}

// Where appends a list predicates to the SynchronizeRecordUpdate builder.
func (sru *SynchronizeRecordUpdate) Where(ps ...predicate.SynchronizeRecord) *SynchronizeRecordUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetUpdatedAt sets the "updated_at" field.
func (sru *SynchronizeRecordUpdate) SetUpdatedAt(t time.Time) *SynchronizeRecordUpdate {
	sru.mutation.SetUpdatedAt(t)
	return sru
}

// SetUserID sets the "user_id" field.
func (sru *SynchronizeRecordUpdate) SetUserID(i int) *SynchronizeRecordUpdate {
	sru.mutation.ResetUserID()
	sru.mutation.SetUserID(i)
	return sru
}

// AddUserID adds i to the "user_id" field.
func (sru *SynchronizeRecordUpdate) AddUserID(i int) *SynchronizeRecordUpdate {
	sru.mutation.AddUserID(i)
	return sru
}

// SetDeviceID sets the "device_id" field.
func (sru *SynchronizeRecordUpdate) SetDeviceID(u uuid.UUID) *SynchronizeRecordUpdate {
	sru.mutation.SetDeviceID(u)
	return sru
}

// Mutation returns the SynchronizeRecordMutation object of the builder.
func (sru *SynchronizeRecordUpdate) Mutation() *SynchronizeRecordMutation {
	return sru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *SynchronizeRecordUpdate) Save(ctx context.Context) (int, error) {
	sru.defaults()
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *SynchronizeRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *SynchronizeRecordUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *SynchronizeRecordUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sru *SynchronizeRecordUpdate) defaults() {
	if _, ok := sru.mutation.UpdatedAt(); !ok {
		v := synchronizerecord.UpdateDefaultUpdatedAt()
		sru.mutation.SetUpdatedAt(v)
	}
}

func (sru *SynchronizeRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(synchronizerecord.Table, synchronizerecord.Columns, sqlgraph.NewFieldSpec(synchronizerecord.FieldID, field.TypeInt))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.UpdatedAt(); ok {
		_spec.SetField(synchronizerecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sru.mutation.UserID(); ok {
		_spec.SetField(synchronizerecord.FieldUserID, field.TypeInt, value)
	}
	if value, ok := sru.mutation.AddedUserID(); ok {
		_spec.AddField(synchronizerecord.FieldUserID, field.TypeInt, value)
	}
	if value, ok := sru.mutation.DeviceID(); ok {
		_spec.SetField(synchronizerecord.FieldDeviceID, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{synchronizerecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// SynchronizeRecordUpdateOne is the builder for updating a single SynchronizeRecord entity.
type SynchronizeRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SynchronizeRecordMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (sruo *SynchronizeRecordUpdateOne) SetUpdatedAt(t time.Time) *SynchronizeRecordUpdateOne {
	sruo.mutation.SetUpdatedAt(t)
	return sruo
}

// SetUserID sets the "user_id" field.
func (sruo *SynchronizeRecordUpdateOne) SetUserID(i int) *SynchronizeRecordUpdateOne {
	sruo.mutation.ResetUserID()
	sruo.mutation.SetUserID(i)
	return sruo
}

// AddUserID adds i to the "user_id" field.
func (sruo *SynchronizeRecordUpdateOne) AddUserID(i int) *SynchronizeRecordUpdateOne {
	sruo.mutation.AddUserID(i)
	return sruo
}

// SetDeviceID sets the "device_id" field.
func (sruo *SynchronizeRecordUpdateOne) SetDeviceID(u uuid.UUID) *SynchronizeRecordUpdateOne {
	sruo.mutation.SetDeviceID(u)
	return sruo
}

// Mutation returns the SynchronizeRecordMutation object of the builder.
func (sruo *SynchronizeRecordUpdateOne) Mutation() *SynchronizeRecordMutation {
	return sruo.mutation
}

// Where appends a list predicates to the SynchronizeRecordUpdate builder.
func (sruo *SynchronizeRecordUpdateOne) Where(ps ...predicate.SynchronizeRecord) *SynchronizeRecordUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *SynchronizeRecordUpdateOne) Select(field string, fields ...string) *SynchronizeRecordUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated SynchronizeRecord entity.
func (sruo *SynchronizeRecordUpdateOne) Save(ctx context.Context) (*SynchronizeRecord, error) {
	sruo.defaults()
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *SynchronizeRecordUpdateOne) SaveX(ctx context.Context) *SynchronizeRecord {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *SynchronizeRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *SynchronizeRecordUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sruo *SynchronizeRecordUpdateOne) defaults() {
	if _, ok := sruo.mutation.UpdatedAt(); !ok {
		v := synchronizerecord.UpdateDefaultUpdatedAt()
		sruo.mutation.SetUpdatedAt(v)
	}
}

func (sruo *SynchronizeRecordUpdateOne) sqlSave(ctx context.Context) (_node *SynchronizeRecord, err error) {
	_spec := sqlgraph.NewUpdateSpec(synchronizerecord.Table, synchronizerecord.Columns, sqlgraph.NewFieldSpec(synchronizerecord.FieldID, field.TypeInt))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SynchronizeRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, synchronizerecord.FieldID)
		for _, f := range fields {
			if !synchronizerecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != synchronizerecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.UpdatedAt(); ok {
		_spec.SetField(synchronizerecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sruo.mutation.UserID(); ok {
		_spec.SetField(synchronizerecord.FieldUserID, field.TypeInt, value)
	}
	if value, ok := sruo.mutation.AddedUserID(); ok {
		_spec.AddField(synchronizerecord.FieldUserID, field.TypeInt, value)
	}
	if value, ok := sruo.mutation.DeviceID(); ok {
		_spec.SetField(synchronizerecord.FieldDeviceID, field.TypeUUID, value)
	}
	_node = &SynchronizeRecord{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{synchronizerecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
