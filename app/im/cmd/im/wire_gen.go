// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"beetle/app/im/internal/biz"
	"beetle/app/im/internal/conf"
	"beetle/app/im/internal/data"
	"beetle/app/im/internal/server"
	"beetle/app/im/internal/service"
	"beetle/app/im/internal/service/ws"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, auth *conf.Auth, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	groupRepo := data.NewGroupRepo(dataData, logger)
	groupUseCase := biz.NewGroupUseCase(groupRepo, logger)
	imService := service.NewImService(groupUseCase, logger)
	grpcServer := server.NewGRPCServer(confServer, auth, imService, logger)
	httpServer := server.NewHTTPServer(confServer, auth, imService, logger)
	messageRepo := data.NewMessageRepo(dataData, logger)
	messageUseCase := biz.NewMessageUseCase(messageRepo, logger)
	wsService := ws.NewService(messageUseCase, logger)
	websocketServer := server.NewWebsocketServer(confServer, auth, logger, wsService)
	app := newApp(logger, grpcServer, httpServer, websocketServer)
	return app, func() {
		cleanup()
	}, nil
}
